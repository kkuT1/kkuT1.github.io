<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>串口通讯</title>
    <url>/2023/09/30/b-chuan-kou-tong-xun/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778044589.png" alt="引入"></h2><h1 id="串口通讯"><a href="#串口通讯" class="headerlink" title="串口通讯"></a>串口通讯</h1><p>串口通讯 (Serial Communication) 是一种设备间非常常用的串行通讯方式，它简单便捷，并且大部分电子设备都支持该通讯方式，在调试设备时经常使用该通讯方式输出调试信息。</p>
<p>串口协议物理层：<br>TTL电平：</p>
<p>逻辑1：2.4V ~ 5V<br>逻辑0： 0   ~ 0.5V</p>
<p>RS232电平：</p>
<p>逻辑1：-15V ~ -3V<br>逻辑0： +3  ~ +15V</p>
<p>串口协议协议层：</p>
<p>串口通讯的数据包由发送设备通过自身的 TXD 接口传输到接收设备的 RXD 接口。在串口通讯的协议层中，规定了数据包的内容，它由启始位、主体数据、校验位以及停止位组成，通讯双方<br>的数据包格式要约定一致才能正常收发数据。<br>本节主要讲解的是串口异步通讯，异步通讯中由于没有时钟信号 ，所以两个通讯设备之间需要约定好波特率，即每个码元的长度，以便对信号进行解码，下图为串口数据包的基本组成，其中用虚线分开的每一格就是代表一个码元。常见的波特率为9600，115200 等。</p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778084226.png" alt="串口数据包"></h2><p>STM32 芯片具有多个 USART 外设用于串口通讯，它是 Universal Synchronous Asynchronous Receiver<br>and Transmitter 的缩写，即通用同步异步收发器可以灵活地与外部设备进行全双工数据交换。有别于 USART，它还有具有 UART 外设 (Universal Asynchronous Receiver and Transmitter)，它是在USART 基础上裁剪掉了同步通信功能，只有异步通信。简单区分同步和异步就是看通信时需不<br>需要对外提供时钟输出，我们平时用的串口通信基本都是 UART。</p>
<h3 id="功能引脚"><a href="#功能引脚" class="headerlink" title="功能引脚"></a>功能引脚</h3><p>TX -&gt;   发送数据输出引脚。</p>
<p>RX -&gt;   接收数据输入引脚。</p>
<p>nRTS -&gt; 请求以发送 (Request To Send)， n 表示低电平有效。如果使能 RTS 流控制，当 USART 接收器准备好接收新数据时就会将 nRTS 变成低电平；当接收寄存器已满时， nRTS 将被设置为高电平。该引脚只适用于硬件流控制。</p>
<p>nCTS -&gt; 清除以发送 (Clear To Send)， n 表示低电平有效。如果使能 CTS 流控制，发送器在发送下一帧数据之前会检测 nCTS 引脚，如果为低电平，表示可以发送数据，如果为高电平则在发送完当前数据帧之后停止发送。该引脚只适用于硬件流控制。</p>
<p>SCLK -&gt; 发送器时钟输出引脚。这个引脚仅适用于同步模式。</p>
<h3 id="数据寄存器"><a href="#数据寄存器" class="headerlink" title="数据寄存器"></a>数据寄存器</h3><p>USART 数据寄存器 (USART_DR) 只有低 9 位有效，并且第 9 位数据是否有效要取决于 USART控制寄存器 1(USART_CR1) 的 M 位设置，当 M 位为 0 时表示 8 位数据字长，当 M 位为 1 表示 9位数据字长，一般使用 8 位数据字长。</p>
<p>USART_DR 包含了已发送的数据或者接收到的数据。</p>
<p> USART_DR 实际是包含了两个寄存器，一个专门用于发送的可写 TDR，一个专门用于接收的可读 RDR。当进行发送操作时，往 USART_DR写入数据会自动存储在 TDR 内；当进行读取操作时，向 USART_DR 读取数据会自动提取 RDR数据。</p>
<p>TDR 和 RDR 都是介于系统总线和移位寄存器之间。串行通信是一个位一个位传输的，发送时把TDR 内容转移到发送移位寄存器，然后把移位寄存器数据每一位发送出去，接收时把接收到的<br>每一位顺序保存在接收移位寄存器内然后才转移到 RDR。</p>
<h3 id="中断控制"><a href="#中断控制" class="headerlink" title="中断控制"></a>中断控制</h3><p>USART 有多个中断请求，可以根据相应标志位判断当前状态。</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778122019.png" alt="串口中断"></p>
<p>下面为USART2的初始化，波特率配置为115200，8字长，无校验，1停止位</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">USART2_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">/* 第一步：初始化GPIO */</span>
	GPIO_InitTypeDef  GPIO_InitStructure<span class="token punctuation">;</span>
	USART_InitTypeDef USART_InitStructure<span class="token punctuation">;</span>
	
	<span class="token function">RCC_AHB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_AHB1Periph_GPIOA<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_OType <span class="token operator">=</span> GPIO_OType_PP<span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_PuPd <span class="token operator">=</span> GPIO_PuPd_UP<span class="token punctuation">;</span>  
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>
  
    <span class="token comment">/* 配置Tx  --  PA9引脚为复用功能  */</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF<span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_2<span class="token punctuation">;</span>  
    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 配置Rx  --  PA10引脚为复用功能 */</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_3<span class="token punctuation">;</span>
    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">/* 配置GPIO的第二功能 */</span>
	 <span class="token comment">/* 连接 PA10 到 USARTx_Tx*/</span>
    <span class="token function">GPIO_PinAFConfig</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span>GPIO_PinSource3<span class="token punctuation">,</span>GPIO_AF_USART2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*  连接 PA9 到 USARTx__Rx*/</span>
    <span class="token function">GPIO_PinAFConfig</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span>GPIO_PinSource2<span class="token punctuation">,</span>GPIO_AF_USART2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">/* 第二步：配置串口初始化结构体 */</span>
	
	 <span class="token comment">/* 使能 USART 时钟 */</span>
    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_USART2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">/* 配置 USART2  */</span>
    <span class="token comment">/* 波特率设置：DEBUG_USART_BAUDRATE */</span>
    USART_InitStructure<span class="token punctuation">.</span>USART_BaudRate <span class="token operator">=</span> <span class="token number">115200</span><span class="token punctuation">;</span><span class="token comment">//串口波特率</span>
    <span class="token comment">/* 字长(数据位+校验位)：8 */</span>
    USART_InitStructure<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span>
    <span class="token comment">/* 停止位：1个停止位 */</span>
    USART_InitStructure<span class="token punctuation">.</span>USART_StopBits <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span>
    <span class="token comment">/* 校验位选择：不使用校验 */</span>
    USART_InitStructure<span class="token punctuation">.</span>USART_Parity <span class="token operator">=</span> USART_Parity_No<span class="token punctuation">;</span>
    <span class="token comment">/* 硬件流控制：不使用硬件流 */</span>
    USART_InitStructure<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span>
    <span class="token comment">/* USART模式控制：同时使能接收和发送 */</span>
    USART_InitStructure<span class="token punctuation">.</span>USART_Mode <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>
    <span class="token comment">/* 完成USART初始化配置 */</span>
    <span class="token function">USART_Init</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	
	<span class="token comment">/* 第三步：配置串口的接收中断 */</span>
    <span class="token comment">/* 嵌套向量中断控制器NVIC配置 */</span>
	<span class="token function">NVIC_Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">/*使能串口接收中断 */</span>
	<span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    <span class="token comment">/* 第四步：使能串口 */</span>
    <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">NVIC_Configuration</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>
    
    <span class="token comment">/* 嵌套向量中断控制器组选择 */</span>
    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* 配置USART1为中断源 */</span>
    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> USART2_IRQn<span class="token punctuation">;</span>
    <span class="token comment">/* 抢断优先级为1 */</span>
    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">/* 子优先级为1 */</span>
    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">/* 使能中断 */</span>
    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>
    <span class="token comment">/* 初始化配置NVIC */</span>
    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="完成串口初始化之后，开始着手处理WT1-IMU发送的数据。"><a href="#完成串口初始化之后，开始着手处理WT1-IMU发送的数据。" class="headerlink" title="完成串口初始化之后，开始着手处理WT1-IMU发送的数据。"></a>完成串口初始化之后，开始着手处理WT1-IMU发送的数据。</h2><h3 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h3><p>补充一下，为什么要使用数据帧进行通讯</p>
<p>串口通信虽然简单方便，但实际使用时会发现需要传输数据的不止1个字节，往往需要传输多个字节组成的数据包，由于串口通信中字节之间相互独立，在传输多个字节的数据时，将面临以下问题：</p>
<ul>
<li>接收端从串口接收的是字节流，那它是如何知道帧的开始或结束呢？它又是如何知道这个帧有多长？</li>
<li>真实的物理硬件是充满噪音和干扰的，由于电噪声，某些字节的位可能被翻转，字节甚至整个帧都可能会丢失。</li>
</ul>
<p>串口通信虽然简单方便，但实际使用时会发现需要传输数据的不止1个字节，往往需要传输多个字节组成的数据包，而因为串口通信中字节之间相互独立，在接收数据时面临“数据包对齐”和“防止数据出错”两大问题。</p>
<p>数据包对齐在也叫数据帧同步。解决方法就是引入帧同步字节，也就是增加帧头、帧尾等，对于固定长度数据帧通信可以只使用帧头帧尾，对于可变长度数据帧通信还需引入描述帧长的字节。利用帧头、帧尾、帧长即可解决。</p>
<p>防止数据出错也叫差错控制。在通信原理中，有四种差错控制方法：检错重发、前向纠错、反馈校验、检错删除。四种差错控制方法各有其优缺点，一般采用检错删除的差错控制算法，故只需要考虑如何检错这一个问题，常用的方法是在数据帧中增加校验字节。</p>
<hr>
<p><a href="https://wit-motion.yuque.com/wumwnr/ltst03/wegquy#%20%E3%80%8AWT61%E5%8D%8F%E8%AE%AE%E3%80%8B">WT1-IMU的通讯协议</a></p>
<p>首先浏览WT1-IMU的通讯协议文档，从中可知：</p>
<pre><code>1.单帧的数据格式
</code></pre>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778287562.png" alt="B-IMU数据帧格式"><br>    2.数据的发送格式<br>    一次发送三帧数据，由二级帧头TYPE区分（我习惯称之为功能字），最终得到的有效数据为9个short类型的数据。</p>
<p>理清通讯协议之后，开始进行串口接收部分的代码编写。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//IMU数据结构体</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    s16 acceleration_X<span class="token punctuation">;</span>
    s16 acceleration_Y<span class="token punctuation">;</span>
    s16 acceleration_Z<span class="token punctuation">;</span><span class="token comment">//三轴加速度</span>
    s16 angular_velocity_X<span class="token punctuation">;</span>
    s16 angular_velocity_Y<span class="token punctuation">;</span>
    s16 angular_velocity_Z<span class="token punctuation">;</span><span class="token comment">//三轴角速度</span>
    s16 Roll<span class="token punctuation">;</span>
    s16 Pitch<span class="token punctuation">;</span>
    s16 Yaw<span class="token punctuation">;</span><span class="token comment">//三轴角度</span>
<span class="token punctuation">}</span>IMU_Data<span class="token punctuation">;</span>

u8 Data_Buf<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//串口接收缓冲区</span>
IMU_Data IMU_DATA<span class="token punctuation">;</span>


<span class="token comment">//串口接收中断</span>
<span class="token keyword">void</span> <span class="token function">USART2_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">uint8_t</span> ucTemp<span class="token punctuation">;</span>

	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">USART_GetITStatus</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span>USART_IT_RXNE<span class="token punctuation">)</span><span class="token operator">!=</span>RESET<span class="token punctuation">)</span><span class="token comment">//获取标志位</span>
	<span class="token punctuation">{</span>		
		ucTemp <span class="token operator">=</span> <span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span> USART2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取数据</span>
        <span class="token function">Data_ByteGet</span><span class="token punctuation">(</span>ucTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>	 
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">Data_ByteGet</span><span class="token punctuation">(</span>u8 data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> u8 pos<span class="token punctuation">;</span>
    
    Data_Buf<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>Data_Buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x55</span><span class="token punctuation">)</span><span class="token comment">//帧头判断</span>
        <span class="token punctuation">{</span>
            pos<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>Data_Buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> acceleration<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>Data_Buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> angular_velocity<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>Data_Buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> angle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//功能字</span>
        <span class="token punctuation">{</span>
            pos<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> pos <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        pos<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//数据域</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//数据和校验比对</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>Data_Buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token function">SUMCRC</span><span class="token punctuation">(</span>Data_Buf<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//校验通过，开始对数据进行处理</span>
            <span class="token function">Data_Analysis</span><span class="token punctuation">(</span>Data_Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>


<span class="token comment">/**
  * @brief  和校验计算函数
  * @param  data_buf -&gt; 待计算的数组地址 lenth -&gt; 数组中待累加元素个数
  * @retval 校验和的低8位
  */</span>
u8 <span class="token function">SUMCRC</span><span class="token punctuation">(</span>u8<span class="token operator">*</span> data_buf<span class="token punctuation">,</span>u8 lenth<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    u8 i<span class="token punctuation">;</span>
    u8 ret<span class="token punctuation">;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>lenth<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ret <span class="token operator">+=</span> data_buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">Data_Analysis</span><span class="token punctuation">(</span>u8<span class="token operator">*</span> Buf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> acceleration<span class="token punctuation">)</span><span class="token comment">//加速度帧</span>
    <span class="token punctuation">{</span>
        IMU_DATA<span class="token punctuation">.</span>acceleration_X<span class="token operator">=</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>Buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>Buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">/</span><span class="token number">32768</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">9.8</span><span class="token punctuation">;</span>
        IMU_DATA<span class="token punctuation">.</span>acceleration_Y<span class="token operator">=</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>Buf<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>Buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">/</span><span class="token number">32768</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">9.8</span><span class="token punctuation">;</span>
        IMU_DATA<span class="token punctuation">.</span>acceleration_Z<span class="token operator">=</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>Buf<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>Buf<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">/</span><span class="token number">32768</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">9.8</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> angular_velocity<span class="token punctuation">)</span><span class="token comment">//角速度帧</span>
    <span class="token punctuation">{</span>
        IMU_DATA<span class="token punctuation">.</span>angular_velocity_X<span class="token operator">=</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>Buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>Buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768</span><span class="token operator">*</span><span class="token number">2000</span><span class="token punctuation">;</span>
        IMU_DATA<span class="token punctuation">.</span>angular_velocity_Y<span class="token operator">=</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>Buf<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>Buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768</span><span class="token operator">*</span><span class="token number">2000</span><span class="token punctuation">;</span>
        IMU_DATA<span class="token punctuation">.</span>angular_velocity_Z<span class="token operator">=</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>Buf<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>Buf<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768</span><span class="token operator">*</span><span class="token number">2000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> angle<span class="token punctuation">)</span><span class="token comment">//角度帧</span>
    <span class="token punctuation">{</span>
        IMU_DATA<span class="token punctuation">.</span>Roll<span class="token operator">=</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>Buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>Buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">;</span>
        IMU_DATA<span class="token punctuation">.</span>Pitch<span class="token operator">=</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>Buf<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>Buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">;</span>
        IMU_DATA<span class="token punctuation">.</span>Yaw<span class="token operator">=</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>Buf<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>Buf<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<p>至此，对WT1-IMU的数据接收已经完成，接下来可以在main.c中将IMU的数据输出到上位机，以此检验串口数据帧的接收。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用串口通过数据帧进行多数据的交互在实际应用中相当常见。串口数据帧的结构相对简单，易于实现和解析，可自行设置数据长度以适应不同数据长度的需求，适用性广泛。</p>
<hr>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778157853.png" alt="串口总结"></p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>F401</tag>
        <tag>串口通讯</tag>
        <tag>协议帧</tag>
      </tags>
  </entry>
  <entry>
    <title>Keil5的魔法棒选项简介</title>
    <url>/2023/10/01/c-keil5-de-mo-fa-bang-jian-jie/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778413765.png" alt="魔法棒引入"></h2><h1 id="Keil5的魔法棒选项简介"><a href="#Keil5的魔法棒选项简介" class="headerlink" title="Keil5的魔法棒选项简介"></a>Keil5的魔法棒选项简介</h1><h2 id="Device"><a href="#Device" class="headerlink" title="Device"></a>Device</h2><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778460206.png" alt="Device"></p>
<p>这个页面功能较为简单，左上方分别显示供应商、芯片类型、工具集，右上方pack为当前使用的芯片包的版本号，URL为arm芯片包的下载地址（魔法上网访问）。中间带有一个搜索框可供检索。下方左侧是目前支持的芯片列表，右侧为该系列芯片资源的英文简介。</p>
<h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778479212.png" alt="Target"></p>
<p>在这个界面中有很多配置信息。<br>Xtal:为当前工程使用的晶振频率</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778525728.png" alt="代码生成区"><br>ARM Compiler:编译器版本<br>下方两个选项分别为：</p>
<ul>
<li>是否使用跨模块优化</li>
<li>是否使用MicroLIB</li>
</ul>
<hr>
<p><strong>tips：</strong><br>MicroLib是一个针对用C编写的基于ARM的嵌入式应用程序的高度优化的库。与包含在ARM编译器工具链中的标准C库相比，MicroLib提供了许多嵌入式系统所需的代码大小的显著优势。</p>
<p>MicroLib和标准C库之间的主要区别是:</p>
<p>1、MicroLib是专为深度嵌入式应用程序而设计的。</p>
<p>2、MicroLib经过优化，比使用ARM标准库使用更少的代码和数据内存。</p>
<p>3、MicroLib被设计成在没有操作系统的情况下工作，但是这并不妨碍它与任何操作系统或RTOS一起使用，如Keil RTX。</p>
<p>4、MicroLib不包含文件I/O或宽字符支持。</p>
<p>5、由于MicroLib已经优化到最小化代码大小，一些函数将比ARM编译工具中可用的标准C库例程执行得更慢。</p>
<p>6、MicroLib和ARM标准库都包含在Keil MDK-ARM中。</p>
<hr>
<p> MicroLIB是一个c语言标准库，它编译出来的固件相比标准C库的固件更小一点，当然性能相对差一些，如果是程序存储空间比较紧张的情况下可以将这个选项打勾。</p>
<p> PS：</p>
<hr>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778676996.png" alt="内存读写区"><br> 左侧通俗点讲是程序指令和只读数据存储区的配置，startup代表程序入口地址所在的区域，左边一般配置为Flash、OTP等存储器挂载在总线上的地址区域，当然我们的程序也可以执行在RAM中，所以左边也可以配置为RAM所在的总线地址区间。右边通俗讲是可读写数据存储的区域，例如栈和堆以及程序中的可读写全局变量，这一块的配置一般在RAM上所以一般配置为RAM所在总线的地址区间。另外，如果我们有多块存储器挂载在总线上时也可以配置多块。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778695180.png" alt="OUTPUT"></p>
<p>输出界面。</p>
<p>包括生成的可执行文件的名称，存储路径(均可修改)。</p>
<h2 id="以及：-是否生成调试信息-是否生成hex文件-是否生成浏览信息-是否生成批处理文件-是否创建库文件"><a href="#以及：-是否生成调试信息-是否生成hex文件-是否生成浏览信息-是否生成批处理文件-是否创建库文件" class="headerlink" title="以及：- 是否生成调试信息- 是否生成hex文件- 是否生成浏览信息- 是否生成批处理文件- 是否创建库文件"></a>以及：<br>- 是否生成调试信息<br>- 是否生成hex文件<br>- 是否生成浏览信息<br>- 是否生成批处理文件<br>- 是否创建库文件</h2><ul>
<li>Creat HEX ile:</li>
</ul>
<p>可执行文件（用于下载到芯片的程序文件），.hex文件一般用于在无法进行仿真器烧录代码的时候使用，通过串口在Boot模式下将代码烧录至芯片。</p>
<ul>
<li>Browse Information:</li>
</ul>
<p>勾选后会生成.crf文件，便于调试，但会使工程编译速度变慢</p>
<p>.crf：浏览信息文件，使用Go to Definition Of(F12) 功能，就需要有这类文件。</p>
<h2 id="Listing"><a href="#Listing" class="headerlink" title="Listing"></a>Listing</h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778724401.png" alt="Listing"></h2><p>第一个选项，可以选择生成链接文件的文件夹。<br>其余配置一般默认。</p>
<h2 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h2><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778760780.png" alt="C-C++"></h2><ul>
<li><p>Preprocessor Symbols:<br>预处理符号，在这里进行的Define/Undefine具有全局属性。</p>
</li>
<li><p>Language/Code Generation：</p>
<p>   <strong>Optimization:</strong> 代码优化，有不同等级可选，配置合适的优化等级将高效的利用编译器的功能对程序进行优化，可以大大提高程序的效率以及对存储的优化。有时优化会带来程序的bug，有时候优化后不是实际想要的结果，这需要在使用的过程中积累经验。</p>
<p>   <strong>C99 Mode：</strong></p>
<p>   <strong>在C99中包括的特性有：</strong></p>
<p>   增加了对编译器的限制，比如源程序每行要求至少支持到 4095 字节，变量名函数名的要求支持到 63 字节（extern 要求支持到 31）。</p>
<p>   增强了预处理功能。例如：<br>   宏支持取可变参数 #define Macro(…) <strong>VA_ARGS</strong><br>   使用宏的时候，允许省略参数，被省略的参数会被扩展成空串。</p>
<p>   支持 // 开头的单行注释（这个特性实际上在C89的很多编译器上已经被支持了）<br>   增加了新关键字 restrict, inline, _Complex, _Imaginary, _Bool<br>   支持 long long, long double _Complex, float _Complex 等类型</p>
<p>   支持不定长的数组，即数组长度可以在运行时决定，比如利用变量作为数组长度。声明时使用 int a[var] 的形式。不过考虑到效率和实现，不定长数组不能用在全局，或 struct 与 union 里。</p>
<p>   变量声明不必放在语句块的开头，for 语句提倡写成 for(int i=0;i&lt;100;++i) 的形式，即i 只在 for 语句块内部有效。</p>
</li>
</ul>
<p>使用 C99 Mode 时需要考虑兼容性和可移植性问题。</p>
<ul>
<li><p>Include Paths:</p>
<p>   在这里需要添加工程中包含的头文件路径。</p>
</li>
</ul>
<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><h2 id="-3"><a href="#-3" class="headerlink" title=""></a><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778787505.png" alt="Debug"></h2><p>这个页面主要跟调试有关，这部分的功能在我们日常工作中经常会使用。如果可以灵活使用这部分的功能在工作中可以达到事半功倍的效果。左边是软件仿真调试配置，右边是硬件仿真调试配置。</p>
<p>两个复选use选项，二选一。我一般使用DAP_link仿真器（便宜），性能一般，支持的断点数目较少。</p>
<ul>
<li><p>仿真器选型<br>下拉选项，可以根据需要选择不同的仿真器。</p>
</li>
<li><p>Load Application at Startup是指跳转到启动文件开始执行。</p>
</li>
<li><p>Run to main()是指开始调试时程序的指针位置main()函数的第一条指令处。</p>
</li>
<li><p>Initialization File:用户自定义地址,能够使开始调试时程序的指针跳转到指定位置</p>
<p><a href="https://blog.csdn.net/u014783785/article/details/92581102">详细内容参考此博客</a></p>
</li>
</ul>
<hr>
<ul>
<li>setting</li>
</ul>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778826246.png" alt="Setting"><br>在这个界面主要进行下载模式的选择（Port: SW/JTAG）以及最大时钟频率的配置（Max Clock）</p>
<p>如果成功识别到仿真器，SWDIO处会显示该设备的序列号</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778867435.png" alt="FlashDown"></p>
<p><em>Download unction</em></p>
<pre><code> Erase Full Chip：下载程序时对芯片flash进行全片擦除；

 Erase Sectors：下载程序时对芯片flash用到的扇区进行擦除；

 Do not Erase：下载程序时不对flash进行擦除；
</code></pre>
<p>右面是对过程的控制：编程、校验、对芯片复位和运行；</p>
<p>正常情况下建议选择部分擦除，，当遇到芯片锁死的情况建议使用全擦除。</p>
<p><em>RAM Algorithm</em></p>
<p>配置RAM的起始地址和大小。</p>
<p><em>Programming Algorithm</em></p>
<p>flash下载引导算法，这个算法的作用就是可以将数据写到芯片内部或者外部的flash中,选择与芯片flash大小一致的即可。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>keil5的魔法棒有很多功能，用好这些会让开发变得更加简单。这里仅对常用功能作大致介绍，余下部分可以自行探索。</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696778886935.png" alt="C结束"></p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>魔法棒</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32DMA学习</title>
    <url>/2023/10/01/dma-xue-xi/</url>
    <content><![CDATA[<h1 id="DMA中断"><a href="#DMA中断" class="headerlink" title="DMA中断"></a><strong>DMA中断</strong></h1><h2 id="实现目的"><a href="#实现目的" class="headerlink" title="实现目的"></a><strong>实现目的</strong></h2><ul>
<li><p>DMA用来提供在外设和存储器之间或者存储器和存储器之间的高速数据传输。<strong>无须CPU的干预</strong>，通过DMA数据可以快速地移动。这就节省了CPU的资源来做其他操作。</p>
</li>
<li><p>中断是指CPU在执行程序的过程中，出现了某些突发事件时CPU必须暂停执行当前的程序，转去处理突发事件，处理完毕后CPU又返回源程序被中断的位置并继续执行。</p>
</li>
<li><p>利用DMA实现大量数据传输，配合中断对数据进行解析，可以大量节省CPU资源并在大工程中能够有效避免数据处理对程序的卡顿现象。</p>
</li>
</ul>
<h2 id="DMA简介"><a href="#DMA简介" class="headerlink" title="DMA简介"></a><strong>DMA简介</strong></h2><p><strong><a href="https://blog.csdn.net/as480133937/article/details/104927922/">DMA详细原理</a></strong></p>
<h3 id="1-DMA介绍"><a href="#1-DMA介绍" class="headerlink" title="1. DMA介绍"></a>1. DMA介绍</h3><h6 id="（1）DMA基本概念"><a href="#（1）DMA基本概念" class="headerlink" title="（1）DMA基本概念:"></a>（1）DMA基本概念:</h6><p>DMA，全称Direct MemoryAccess，即直接存储器访问。DMA传输将数据从一个地址空间复制到另一个地址空间，-用于在外设与存储器之间以及存储器与存储器之间进行高速数据传输。DMA传输过程的初始化和启动由CPU完成，传输过程由DMA控制器来执行，无需CPU参与，从而节省CPU资源，提高利用率。</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781153485.png" alt="DMA.png"></p>
<h6 id="（2）STM32的DMA控制器特点"><a href="#（2）STM32的DMA控制器特点" class="headerlink" title="（2）STM32的DMA控制器特点:"></a>（2）STM32的DMA控制器特点:</h6><ol>
<li>STM32F401微控制器具备两个DMA控制器：DMA1和DMA2，每个控制器有8个数据流，每个数据流可以映射到8个通道（或请求）；</li>
<li>每一个DMA控制器用于管理一个或多个外设的存储器访问请求，并通过总线仲裁器来协调各个DMA请求的优先级；</li>
<li>数据流（stream）是用于连接传输源和传输目标的数据通路，每个数据流可以配置为不同的传输源和传输目标，这些传输源和传输目标称为通道（Channel）；</li>
<li>具备16字节的FIFO。使能FIFO功能后，源数据先送入FIFO，达到FIFO的触发阈值后，再传送到目标地址。</li>
</ol>
<h6 id="（3）DMA的主要特征"><a href="#（3）DMA的主要特征" class="headerlink" title="（3）DMA的主要特征:"></a>（3）DMA的主要特征:</h6><ol>
<li><p>在同一个DMA模块上，多个请求间的优先权可以通过软件编程设置（共有四级：很高、高、中等和低），优先权设置相等时由硬件决定（请求0优先于请求1，依此类推）；</p>
</li>
<li><p>独立数据源和目标数据区的传输宽度（字节、半字、全字），模拟打包和拆包的过程。源和目标地址必须按数据传输宽度对齐；</p>
</li>
<li><p>支持循环的缓冲器管理，即FIFO模式，用于在源数据传输到目标地址之前临时存放这些数据，阈值有1/4、1/2、3/4 和满；</p>
</li>
<li><p>每个通道都有3个事件标志（DMA半传输、DMA传输完成和DMA传输出错），这3个事件标志逻辑或成为一个单独的中断请求；</p>
</li>
<li><p>存储器和存储器间的传输、外设和存储器、存储器和外设之间的传输，如图所示；<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781120173.png" alt="DMA.png"></p>
</li>
<li><p>闪存、SRAM、外设的SRAM、APB1、APB2和AHB外设均可作为访问的源和目标；<br>可编程的数据传输数目：最大为65535。</p>
</li>
</ol>
<h6 id="（4）DMA的数据传输方式："><a href="#（4）DMA的数据传输方式：" class="headerlink" title="（4）DMA的数据传输方式："></a>（4）DMA的数据传输方式：</h6><ul>
<li><strong>普通模式:</strong><br>传输结束后（即要传输数据的数量达到零），将不再产生DMA操作。若开始新的DMA传输，需在关闭DMA通道情况下，重新启动DMA传输。</li>
<li><strong>循环模式:</strong><br>可用于处理环形缓冲区和连续数据流（例如ADC扫描模式）。当激活循环模式后，每轮传输结束时，要传输的数据数量将自动用设置的初始值进行加载， 并继续响应DMA请求。</li>
</ul>
<h3 id="2-DMA原理图"><a href="#2-DMA原理图" class="headerlink" title="2. DMA原理图"></a>2. DMA原理图</h3><h5 id="这是DMA工作流程图："><a href="#这是DMA工作流程图：" class="headerlink" title="这是DMA工作流程图："></a>这是DMA工作流程图：</h5><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696780984930.png" alt="工作流程图"></p>
<h5 id="DMA1通道图如下："><a href="#DMA1通道图如下：" class="headerlink" title="DMA1通道图如下："></a>DMA1通道图如下：</h5><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781002302.png" alt=" DMA1"></p>
<h5 id="DMA2通道图如下："><a href="#DMA2通道图如下：" class="headerlink" title="DMA2通道图如下："></a>DMA2通道图如下：</h5><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781021656.png" alt="DMA2"></p>
<h5 id="DMA系统框图如下："><a href="#DMA系统框图如下：" class="headerlink" title="DMA系统框图如下："></a>DMA系统框图如下：</h5><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781037048.png" alt="系统框图"></p>
<h2 id="DMA结构体"><a href="#DMA结构体" class="headerlink" title="DMA结构体"></a><strong>DMA结构体</strong></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> DMA_Channel<span class="token punctuation">;</span>             <span class="token comment">//通道选择,通道0~7</span>
    <span class="token class-name">uint32_t</span> DMA_PeripheralBaseAddr<span class="token punctuation">;</span>  <span class="token comment">//外设地址</span>
    <span class="token class-name">uint32_t</span> DMA_Memory0BaseAddr<span class="token punctuation">;</span>     <span class="token comment">//存储器地址</span>
    <span class="token class-name">uint32_t</span> DMA_DIR<span class="token punctuation">;</span>                 <span class="token comment">//传输方向</span>
    <span class="token class-name">uint32_t</span> DMA_BufferSize<span class="token punctuation">;</span>          <span class="token comment">//数据数目,设定待传输数据数目</span>
    <span class="token class-name">uint32_t</span> DMA_PeripheralInc<span class="token punctuation">;</span>       <span class="token comment">//外设递增</span>
    <span class="token class-name">uint32_t</span> DMA_MemoryInc<span class="token punctuation">;</span>           <span class="token comment">//存储器递增</span>
    <span class="token class-name">uint32_t</span> DMA_PeripheralDataSize<span class="token punctuation">;</span>  <span class="token comment">//外设数据宽度(字节、半字、全字)</span>
    <span class="token class-name">uint32_t</span> DMA_MemoryDataSize<span class="token punctuation">;</span>      <span class="token comment">//存储器数据宽度(字节、半字、全字)</span>
    <span class="token class-name">uint32_t</span> DMA_Mode<span class="token punctuation">;</span>                <span class="token comment">//模式选择(普通模式和循环模式)</span>
    <span class="token class-name">uint32_t</span> DMA_Priority<span class="token punctuation">;</span>            <span class="token comment">//优先级(很高、高、中等和低)</span>
    <span class="token class-name">uint32_t</span> DMA_FIFOMode<span class="token punctuation">;</span>            <span class="token comment">//FIFO模式</span>
    <span class="token class-name">uint32_t</span> DMA_FIFOThreshold<span class="token punctuation">;</span>       <span class="token comment">//FIFO阈值</span>
    <span class="token class-name">uint32_t</span> DMA_MemoryBurst<span class="token punctuation">;</span>         <span class="token comment">//存储器突发传输</span>
    <span class="token class-name">uint32_t</span> DMA_PeripheralBurst<span class="token punctuation">;</span>     <span class="token comment">//外设突发传输</span>
<span class="token punctuation">}</span> DMA_InitTypeDef<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="DMA结构体初始化"><a href="#DMA结构体初始化" class="headerlink" title="DMA结构体初始化"></a><strong>DMA结构体初始化</strong></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>       <span class="token macro-name">JY60_len</span>             <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">30</span><span class="token punctuation">)</span>       </span><span class="token comment">//陀螺仪数据缓存区长度</span></span>
<span class="token class-name">uint8_t</span>       JY60_Buff<span class="token punctuation">[</span>JY60_len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment">// 陀螺仪接收数据缓存区（自定义内存）</span>

<span class="token keyword">void</span> <span class="token function">DMA_USART2_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">/*开启DMA时钟*/</span>
	<span class="token function">RCC_AHB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_AHB1Periph_DMA1<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">/*使能DMA1的数据流1*/</span>
	<span class="token function">DMA_DeInit</span><span class="token punctuation">(</span>DMA1_Stream5<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">/*等待DMA可配置*/</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">DMA_GetCmdStatus</span><span class="token punctuation">(</span>DMA1_Stream5<span class="token punctuation">)</span> <span class="token operator">!=</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>	
		
    <span class="token comment">/*DMA结构体初始化*/</span>
    DMA_InitTypeDef DMA_InitStructure<span class="token punctuation">;</span>
	DMA_InitStructure<span class="token punctuation">.</span>DMA_Channel<span class="token operator">=</span>DMA_Channel_4<span class="token punctuation">;</span><span class="token comment">//使能DMA数据流1的通道4</span>
	DMA_InitStructure<span class="token punctuation">.</span>DMA_PeripheralBaseAddr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>USART2<span class="token operator">-&gt;</span>DR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置DMA外设基地址</span>
	DMA_InitStructure<span class="token punctuation">.</span>DMA_Memory0BaseAddr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>JY60_Buff<span class="token punctuation">;</span><span class="token comment">//设置内存基地址 (要传输的变量的指针)</span>
	DMA_InitStructure<span class="token punctuation">.</span>DMA_DIR <span class="token operator">=</span> DMA_DIR_PeripheralToMemory<span class="token punctuation">;</span><span class="token comment">//传输方向：从外设到内存</span>
	DMA_InitStructure<span class="token punctuation">.</span>DMA_BufferSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>JY60_len<span class="token punctuation">;</span><span class="token comment">//DMA通道的DMA缓存的大小</span>
	DMA_InitStructure<span class="token punctuation">.</span>DMA_PeripheralInc <span class="token operator">=</span> DMA_PeripheralInc_Disable<span class="token punctuation">;</span><span class="token comment">//外设基地址不增</span>
	DMA_InitStructure<span class="token punctuation">.</span>DMA_MemoryInc <span class="token operator">=</span> DMA_MemoryInc_Enable<span class="token punctuation">;</span><span class="token comment">//内存基地址自增</span>
	DMA_InitStructure<span class="token punctuation">.</span>DMA_PeripheralDataSize<span class="token operator">=</span>DMA_PeripheralDataSize_Byte<span class="token punctuation">;</span><span class="token comment">//外设数据宽度：一个字节</span>
	DMA_InitStructure<span class="token punctuation">.</span>DMA_MemoryDataSize <span class="token operator">=</span> DMA_MemoryDataSize_Byte<span class="token punctuation">;</span><span class="token comment">//内存数据宽度：一个字节</span>
	DMA_InitStructure<span class="token punctuation">.</span>DMA_Mode <span class="token operator">=</span> DMA_Mode_Normal<span class="token punctuation">;</span><span class="token comment">//DMA 模式：正常传输</span>
	DMA_InitStructure<span class="token punctuation">.</span>DMA_Priority <span class="token operator">=</span> DMA_Priority_High<span class="token punctuation">;</span><span class="token comment">//优先级：高 </span>

    DMA_InitStructure<span class="token punctuation">.</span>DMA_FIFOMode <span class="token operator">=</span> DMA_FIFOMode_Enable<span class="token punctuation">;</span><span class="token comment">//禁用 FIFO</span>

    <span class="token comment">/*此处为FIFO模式功能，已被禁用，无需设置*/</span>
	DMA_InitStructure<span class="token punctuation">.</span>DMA_FIFOThreshold <span class="token operator">=</span> DMA_FIFOThreshold_Full<span class="token punctuation">;</span><span class="token comment">//FIFO 阈值：满</span>
	DMA_InitStructure<span class="token punctuation">.</span>DMA_MemoryBurst <span class="token operator">=</span> DMA_MemoryBurst_Single<span class="token punctuation">;</span><span class="token comment">//存储器突发传输 16 个节拍</span>
	DMA_InitStructure<span class="token punctuation">.</span>DMA_PeripheralBurst <span class="token operator">=</span> DMA_PeripheralBurst_Single<span class="token punctuation">;</span><span class="token comment">//外设突发传输 1 个节拍</span>

    <span class="token function">DMA_Init</span><span class="token punctuation">(</span>DMA1_Stream5<span class="token punctuation">,</span> <span class="token operator">&amp;</span>DMA_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">/*使能完成中断*/</span>	
	<span class="token function">DMA_ITConfig</span><span class="token punctuation">(</span>DMA1_Stream5<span class="token punctuation">,</span> DMA_IT_TC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>	
	
	<span class="token comment">/*使能DMA*/</span>
    <span class="token function">DMA_Cmd</span><span class="token punctuation">(</span>DMA1_Stream5<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>==<strong>注意要点：</strong>==</p>
<ol>
<li>需要使能DMA时钟和数据流，一般禁用FIFO模式。</li>
<li>外设—&gt;存储器（内存）：外设基地址不增，内存基地址自增。</li>
<li>存储器（内存）—&gt;外设：内存基地址不增，外设基地址自增。</li>
<li>DMA_BufferSize需要根据数据实际解算频率设置，否者会影响程序运行。</li>
<li>DMA用于数据传输时，一般用普通模式，循环模式常用于ADC信号扫描。</li>
</ol>
<h2 id="DMA中断函数及数据解析"><a href="#DMA中断函数及数据解析" class="headerlink" title="DMA中断函数及数据解析"></a><strong>DMA中断函数及数据解析</strong></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*-------------------------------开启一次DMA传输-------------------------*/</span>
<span class="token comment">//此函数为DMA普通模式下对DMA进行重新初始化，保证DMA可以连续解析数据</span>
<span class="token keyword">void</span> <span class="token function">DMA_Enable</span><span class="token punctuation">(</span>DMA_Stream_TypeDef<span class="token operator">*</span> DMAy_Streamx<span class="token punctuation">,</span><span class="token class-name">uint32_t</span> DMA_FLAG_TCIFx<span class="token punctuation">,</span><span class="token class-name">uint32_t</span> DMA_FLAG_TEIFx<span class="token punctuation">,</span><span class="token class-name">uint32_t</span> DMA_FLAG_HTIFx<span class="token punctuation">,</span><span class="token class-name">uint16_t</span> length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">DMA_Cmd</span><span class="token punctuation">(</span>DMAy_Streamx<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                           <span class="token comment">//关闭DMA</span>
  <span class="token function">DMA_ClearFlag</span><span class="token punctuation">(</span>DMAy_Streamx<span class="token punctuation">,</span>DMA_FLAG_TCIFx<span class="token operator">|</span> DMA_FLAG_TEIFx<span class="token operator">|</span>DMA_FLAG_HTIFx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清除DMAy_Streamx传输完成标志</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">DMA_GetCmdStatus</span><span class="token punctuation">(</span>DMAy_Streamx<span class="token punctuation">)</span> <span class="token operator">!=</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>                       <span class="token comment">//等待传输结束</span>
  <span class="token function">DMA_SetCurrDataCounter</span><span class="token punctuation">(</span>DMAy_Streamx<span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//设置传输数据长度 </span>
  <span class="token function">DMA_Cmd</span><span class="token punctuation">(</span>DMAy_Streamx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment">//开启DMA</span>
<span class="token punctuation">}</span>

<span class="token comment">/*-------------------------DMA1_Stream6-USART2-JY60-中断函数-------------------------*/</span>
<span class="token keyword">void</span> <span class="token function">DMA1_Stream5_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">DMA_GetITStatus</span><span class="token punctuation">(</span>DMA1_Stream5<span class="token punctuation">,</span>DMA_IT_TCIF5<span class="token punctuation">)</span><span class="token operator">==</span>SET<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">JY60_Data_Out</span><span class="token punctuation">(</span>JY60_Buff<span class="token punctuation">,</span>JY60_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//JY60数据解析</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>JY60_len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//将数据缓存区清零</span>
		<span class="token punctuation">{</span>
			JY60_Buff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">//清除DMA各种中断标志位，重装载DMA,方便下次数据传输</span>
		<span class="token function">DMA_Enable</span><span class="token punctuation">(</span>DMA1_Stream5<span class="token punctuation">,</span>DMA_FLAG_TCIF5<span class="token punctuation">,</span>DMA_FLAG_TEIF5<span class="token punctuation">,</span>DMA_FLAG_HTIF5<span class="token punctuation">,</span>JY61_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>		
<span class="token punctuation">}</span>


<span class="token keyword">float</span> fAcc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   	<span class="token comment">//加速度</span>
<span class="token keyword">float</span> fGyro<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>	  	<span class="token comment">//角速度</span>
<span class="token keyword">float</span> fAngle<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 	<span class="token comment">//角度</span>
<span class="token keyword">float</span> Temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>			<span class="token comment">//温度</span>
<span class="token class-name">uint8_t</span> JY60_flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>	<span class="token comment">//JY60通讯成功标志位</span>
<span class="token keyword">float</span> yaw<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>			<span class="token comment">//航向角</span>

<span class="token keyword">void</span> <span class="token function">JY61_Data_Out</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> Rebuf<span class="token punctuation">,</span><span class="token class-name">uint32_t</span> Size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> Sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token class-name">uint8_t</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token comment">//接收缓冲器下标索引</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>	  
		<span class="token keyword">if</span><span class="token punctuation">(</span>Rebuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0x55</span><span class="token punctuation">)</span><span class="token comment">//检查帧头</span>
		<span class="token punctuation">{</span>
		   <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
		   <span class="token punctuation">{</span>
			Sum <span class="token operator">=</span> Sum<span class="token operator">+</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//对数据求和</span>
		   <span class="token punctuation">}</span>
			<span class="token keyword">switch</span><span class="token punctuation">(</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">case</span> <span class="token number">0x51</span><span class="token operator">:</span><span class="token comment">//加速度数据解析</span>
						fAcc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">;</span>
						fAcc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">;</span>
						fAcc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">;</span>
						Temp    <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">340.0</span><span class="token operator">+</span><span class="token number">36.25</span><span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
				<span class="token keyword">case</span> <span class="token number">0x52</span><span class="token operator">:</span><span class="token comment">//角速度数据解析</span>
						fGyro<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">2000</span><span class="token punctuation">;</span>
						fGyro<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">2000</span><span class="token punctuation">;</span>
						fGyro<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">2000</span><span class="token punctuation">;</span>
						Temp     <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">340.0</span><span class="token operator">+</span><span class="token number">36.25</span><span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
				<span class="token keyword">case</span> <span class="token number">0x53</span><span class="token operator">:</span><span class="token comment">//角度数据解析</span>
						fAngle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">;</span>
						fAngle<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">;</span>
						fAngle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">32768.0</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">;</span>
						Temp      <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span> Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">340.0</span><span class="token operator">+</span><span class="token number">36.25</span><span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
            <span class="token comment">//对数据进行求和校验，并对角度数据进行处理</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">==</span>Sum<span class="token operator">&amp;&amp;</span>Rebuf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0x53</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				JY60_flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>JY60_flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				JY60_flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//JY60标志位清零</span>

                <span class="token comment">//将角度由0°~180°~360°转化为-180°~0°~180°，方便后续对角度的运用</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>fAngle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token number">0.0f</span><span class="token operator">&amp;&amp;</span>fAngle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">180.0f</span><span class="token punctuation">)</span>
				<span class="token punctuation">{</span>
					fAngle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>fAngle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>fAngle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">180.0f</span><span class="token operator">&amp;&amp;</span>fAngle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">360.0f</span><span class="token punctuation">)</span>
				<span class="token punctuation">{</span>
					fAngle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>fAngle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">360.0f</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token comment">//防止其他数据对yaw的干扰</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>fAngle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
				<span class="token punctuation">{</span>
				 yaw<span class="token operator">=</span>  fAngle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>					
		<span class="token punctuation">}</span>					
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>==<strong>注意要点：</strong>==</p>
<ol>
<li>DMA中断和串口接收中断对数据解析有所不同，DMA中断是直接对内存中已有数据进行for循环解析，而串口接收中断是需要先存储数据再解析。</li>
<li>DMA中断名是规定的，不可随便更改。</li>
<li>每次DMA解析结束时，需要对DMA重初始化，否则将无法进行下次数据传输。</li>
<li>解析结束时，记得将数据缓存区清零。</li>
</ol>
<h2 id="编程要点及总结"><a href="#编程要点及总结" class="headerlink" title="编程要点及总结"></a><strong>编程要点及总结</strong></h2><ol>
<li>首先定义一个全局数组用于存放DMA传输数据。</li>
<li>接着初始化DMA,开启DMA相关时钟，配置普通模式并开启DMA完成中断。</li>
<li>写DMA中断函数，并将DMA解析函数和DMA重装载函数放入中断里。</li>
<li>接着在main 函数延时500ms打印解析数据至上位机。</li>
</ol>
<p>==<strong>总结：</strong>==<br>熟练掌握DMA中断处理数据，将大大减少数据处理对程序的卡顿现象，并且可以有效避免多个中断存在时引起数据处理不及时问题，因此DMA非常重要！</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>DMA</tag>
      </tags>
  </entry>
  <entry>
    <title>Keil5-debug仿真教程</title>
    <url>/2023/10/01/keil5-debug-fang-zhen-jiao-cheng/</url>
    <content><![CDATA[<h1 id="Keil5-debug仿真教程"><a href="#Keil5-debug仿真教程" class="headerlink" title="Keil5-debug仿真教程"></a><strong>Keil5-debug仿真教程</strong></h1><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781254220.jpg" alt="keil5"></p>
<h2 id="一、学习目的"><a href="#一、学习目的" class="headerlink" title="一、学习目的"></a>一、学习目的</h2><hr>
<p><strong>Debug</strong> 是指在软件开发过程中，通过识别和解决问题来调试程序的过程。通常需要找出程序中的错误、异常或潜在问题，并修复它们以确保程序的正确性和稳定性。</p>
<h5 id="常见的debug方法有三种："><a href="#常见的debug方法有三种：" class="headerlink" title="常见的debug方法有三种："></a><strong>常见的debug方法有三种：</strong></h5><ol>
<li><p>==硬件调试==：通过LED灯、蜂鸣器等能使人员感知到的器件，利用其交互性进行调试。</p>
</li>
<li><p>==打印调试==：使用串口（Printf）,能将数据信息发送的方式，追踪程序运行状态。</p>
</li>
<li><p>==调速器调试==：利用设备支持的硬件内部运行状态追踪功能调试，大部分单片机都支持调试器调试，如STM32配合ST-Link,DAP-Link,fireDAP等调试工具。</p>
</li>
</ol>
<p><strong>目的：</strong> 众所周知，硬件调试过于复杂，需要单独写一段初始化代码，所以不经常使用；而打印调试需要在源代码中加入大量 &lt;printf&gt;,极易引起代码混乱。以上两者方法调试效率低下，因此作为一名嵌入式工程师掌握调试器调试必不可少。</p>
<hr>
<h2 id="二、keil5-debug-步骤"><a href="#二、keil5-debug-步骤" class="headerlink" title="二、keil5-debug 步骤"></a>二、keil5-debug 步骤</h2><h3 id="（1）正确连接烧录器"><a href="#（1）正确连接烧录器" class="headerlink" title="（1）正确连接烧录器"></a>（1）正确连接烧录器</h3><table>
<thead>
<tr>
<th align="center"><strong>DAP-Link</strong></th>
<th align="center"><strong>ST-Link</strong></th>
<th align="center"><strong>Stm32单片机</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>SCK</strong></td>
<td align="center"><strong>SWCLK</strong></td>
<td align="center"><strong>SCK</strong></td>
</tr>
<tr>
<td align="center"><strong>SWD</strong></td>
<td align="center"><strong>SWDIO</strong></td>
<td align="center"><strong>DIO</strong></td>
</tr>
<tr>
<td align="center"><strong>3V3			（5V）</strong></td>
<td align="center"><strong>3V3			（5V）</strong></td>
<td align="center"><strong>VCC		（5V）</strong></td>
</tr>
<tr>
<td align="center"><strong>GND</strong></td>
<td align="center"><strong>GND</strong></td>
<td align="center"><strong>GND</strong></td>
</tr>
</tbody></table>
<h3 id="（2）设置-keil5-Options-Debug选项"><a href="#（2）设置-keil5-Options-Debug选项" class="headerlink" title="（2）设置 keil5-Options-Debug选项"></a>（2）设置 keil5-Options-Debug选项</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781300736.png" alt="keil5-Debug-1.png"></p>
<ol>
<li>选择ST-link或者DAP-Link;</li>
<li>勾选“Load Application at Startup” 和 Run to main();</li>
<li>打开“Setting”并确定。</li>
</ol>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781319301.png" alt="keil5-Debug-2.png"></p>
<ol>
<li>检查SWDIO是否连接成功；</li>
<li>“Port” 设置为 “SW”，“Connect” 设置为 “Normal”，“Reset” 设置为 SYSRESETREQ(Default);</li>
<li>Max Clock 设置低于10M;</li>
<li>点击确定。</li>
</ol>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781338308.png" alt="keil5-Debug-3.png"></p>
<ol>
<li>选择Flash DownLoad 中的 “Reset and Run”；</li>
<li>检查是否添加Flash编程算法；</li>
<li>Utilities 选择 “St-link Debugger” 或者 “DAP-Link Dabugger”,勾选 “Update Target before Debugger”；</li>
<li>设置完毕后点击确定。</li>
</ol>
<h3 id="（3）开始调试"><a href="#（3）开始调试" class="headerlink" title="（3）开始调试"></a>（3）开始调试</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781385531.png" alt="image.png"></p>
<p>单击窗口上的调试按钮快捷图标（上图红色框内图标），进入到软件模拟调试模式。</p>
<h3 id="（4）调试工具栏介绍"><a href="#（4）调试工具栏介绍" class="headerlink" title="（4）调试工具栏介绍"></a>（4）调试工具栏介绍</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781398621.png" alt="image.png"></p>
<table>
<thead>
<tr>
<th align="center"><strong>1</strong></th>
<th align="center"><strong>复位</strong></th>
<th align="left">对程序进行复位操作，根据烧录器不同的复位方式配置会触发不同的复位类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>2</strong></td>
<td align="center"><strong>全速运行</strong></td>
<td align="left">使当前程序开始正常全速运行，直到程序遇到断点时停止</td>
</tr>
<tr>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>单步调试</strong></td>
<td align="left">根据当前调试的窗口的语言，执行单条语句。如果遇到函数，则会进入函数内部。如果是在反汇编窗口中，则只执行一条汇编指令</td>
</tr>
<tr>
<td align="center"><strong>4</strong></td>
<td align="center"><strong>单步跳过调试</strong></td>
<td align="left">如果是在C语言窗口中，则是按单条语句执行，与单步调试不同的是，遇到函数不会进入函数内部，而是直接全速运行函数，并跳到下一条语句</td>
</tr>
<tr>
<td align="center"><strong>5</strong></td>
<td align="center"><strong>单步返回调试</strong></td>
<td align="left">如果是在C语言窗口中，则是按单条语句执行，与单步调试不同的是，遇到函数不会进入函数内部，而是直接全速运行函数，并跳到下一条语句</td>
</tr>
<tr>
<td align="center"><strong>6</strong></td>
<td align="center"><strong>运行到当前光标</strong></td>
<td align="left">程序直接运行至当前光标所在行</td>
</tr>
<tr>
<td align="center"><strong>7</strong></td>
<td align="center"><strong>插入/移除断点</strong></td>
<td align="left">如果当前光标所在行未有断点，则插入断点，在有断点的情况下则是移除断点，插入断点后，当前行前面会有个红圆表示断点位置。（断点最多只能打7个）</td>
</tr>
<tr>
<td align="center"><strong>8</strong></td>
<td align="center"><strong>使能/禁止断点</strong></td>
<td align="left">开启或禁止当前光标所在行的断点。禁止后红圆变成白圆。</td>
</tr>
<tr>
<td align="center"><strong>9</strong></td>
<td align="center"><strong>禁止所有断点</strong></td>
<td align="left">禁止当前所有的断点</td>
</tr>
<tr>
<td align="center"><strong>10</strong></td>
<td align="center"><strong>删除所有断点</strong></td>
<td align="left">删除所有断点</td>
</tr>
</tbody></table>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781418964.png" alt="image.png"></p>
<blockquote>
<p>停止全速运行（上图红色框内图标），全速运行程序时激活该按钮，用来停止正全速运行的程序。</p>
</blockquote>
<p><a href="https://www.bilibili.com/video/BV1we4y1t7Uh/?spm_id_from=333.337.search-card.all.click&amp;vd_source=65cc1b0c6a89ff46e6b6a0afb26e5023">点击观看  Debug模式下调试选项介绍</a></p>
<h3 id="（5）全局变量查看（Watch1-和-Watch2）"><a href="#（5）全局变量查看（Watch1-和-Watch2）" class="headerlink" title="（5）全局变量查看（Watch1    和    Watch2）"></a>（5）全局变量查看（Watch1    和    Watch2）</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781653394.gif" alt="Watch.gif"></p>
<blockquote>
<p>通过”View-&gt;Watch Windows-&gt;Watch1、Watch2”可以选择打开Watch窗口，也可以在工具栏打开。</p>
</blockquote>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781474820.gif" alt="Watch.gif"></p>
<blockquote>
<p>通过选中一个变量，右键添加入对应的Watch窗口，可以追踪查看当前变量的变化状态。注意，只有全局变量可以全程监视，临时变量只有在进入当前函数中才可监视到其数据，用static关键词修饰的变量无法监视。<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781490481.gif" alt="Periodic-Window-Update.png"></p>
</blockquote>
<blockquote>
<p>如果当前变量没有实时更新，则需要点击”View-&gt;Periodic Window Update”将其勾选上。</p>
</blockquote>
<h3 id="（6）局部变量查看（Call-Stack-Window）"><a href="#（6）局部变量查看（Call-Stack-Window）" class="headerlink" title="（6）局部变量查看（Call Stack Window）"></a>（6）局部变量查看（Call Stack Window）</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781712720.gif" alt="Call-Stack-window.gif"></p>
<blockquote>
<p>这个窗口可以查看函数内部局部变量的栈空间，也可以查看当前程序调度关系，当出现有进入硬件错误异常调试时可以快速定位到是哪里触发的异常。</p>
</blockquote>
<h3 id="（6）逻辑分析窗口（Analysis-Windows）"><a href="#（6）逻辑分析窗口（Analysis-Windows）" class="headerlink" title="（6）逻辑分析窗口（Analysis Windows）"></a>（6）逻辑分析窗口（Analysis Windows）</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781528548.gif" alt="image.gif"></p>
<blockquote>
<p>这个窗口只能在软件模拟仿真中使用，如果使用硬件调试，需要硬件支持，如下是逻辑分析窗口介绍。</p>
</blockquote>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781546611.png" alt="image.png"></p>
<p><a href="https://www.bilibili.com/video/BV1fm4y17777/?spm_id_from=333.337.search-card.all.click">点击观看逻辑分析窗口详细用法</a></p>
<h3 id="（7）内存查看窗口（Memory）"><a href="#（7）内存查看窗口（Memory）" class="headerlink" title="（7）内存查看窗口（Memory）"></a>（7）内存查看窗口（Memory）</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781562136.gif" alt="memory.gif"></p>
<blockquote>
<p>通过”View-&gt;Memory Windows-&gt;Memory1/2/3/4”打开Memory窗口，也可以通过工具栏打开。此窗口可以用来查看各变量的内存地址和RAM地址。</p>
</blockquote>
<h3 id="（8）寄存器窗口（Register-Window）"><a href="#（8）寄存器窗口（Register-Window）" class="headerlink" title="（8）寄存器窗口（Register Window）"></a>（8）寄存器窗口（Register Window）</h3><p>![image.gif]<img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781574989.gif" alt="enter description here"></p>
<blockquote>
<p>这个窗口用于查看当前内核的相关寄存器，如汇编里常说的15个通用寄存器。</p>
</blockquote>
<h3 id="（9）断点调试"><a href="#（9）断点调试" class="headerlink" title="（9）断点调试"></a>（9）断点调试</h3><p><a href="https://www.bilibili.com/video/BV1ee4y177Ad/?spm_id_from=333.788.recommend_more_video.0">点击观看 Debug模式下断点的使用</a></p>
<ol>
<li>设置断点；</li>
<li>点击全速运行；</li>
<li>查看代码光标是否运行到断点位置，如果运行至断点结束则说明前面代码正常运行；</li>
<li>如果代码无法运行至断点则说明前面代码出现卡死现象异常或者断点设置异常；</li>
<li>接着从最有可能卡停位置进行单步调试，适当观察全局变量和局部变量是否正常改变，直至找到bug；</li>
<li>也可以利用逻辑分析仪观察对应IO口的电平变化，从而了解问题所在。</li>
</ol>
<p><a href="https://blog.csdn.net/u012749085/article/details/126830777?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169623360016800192274943%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169623360016800192274943&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-126830777-null-null.142%5Ev94%5EchatsearchT3_1&amp;utm_term=keil5%20debug%E6%95%99%E7%A8%8B&amp;spm=1018.2226.3001.4187">如要详细了解 Keil5-debug 其他窗口，请点击这里</a></p>
<hr>
<h2 id="三、其他问题总结"><a href="#三、其他问题总结" class="headerlink" title="三、其他问题总结"></a>三、其他问题总结</h2><h5 id="1-keil硬件仿真无法进入main函数-或-debug卡死的原因总结"><a href="#1-keil硬件仿真无法进入main函数-或-debug卡死的原因总结" class="headerlink" title="1.keil硬件仿真无法进入main函数 或 debug卡死的原因总结"></a>1.keil硬件仿真无法进入main函数 或 debug卡死的原因总结</h5><p><a href="https://blog.csdn.net/sarsscofy/article/details/122395372?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=keil5%20%20debug%20%20%E5%8F%AF%E8%83%BD%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-6-122395372.142%5Ev94%5EchatsearchT3_1&amp;spm=1018.2226.3001.4187">问题1解决方案</a></p>
<h5 id="2-keil软件仿真进不去main函数"><a href="#2-keil软件仿真进不去main函数" class="headerlink" title="2.keil软件仿真进不去main函数"></a>2.keil软件仿真进不去main函数</h5><p><a href="https://blog.csdn.net/YANGHUIFEI01/article/details/132320956?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169624640016800186551666%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=169624640016800186551666&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-13-132320956-null-null.142%5Ev94%5EchatsearchT3_1&amp;utm_term=keil5%E8%BD%AF%E4%BB%B6%E4%BB%BF%E7%9C%9F%E4%B8%8D%E8%83%BD%E8%BF%90%E8%A1%8C&amp;spm=1018.2226.3001.4187">问题2解决方案</a></p>
<p><a href="https://www.bilibili.com/video/BV12E411c7Nd/?spm_id_from=333.337.search-card.all.click&amp;vd_source=65cc1b0c6a89ff46e6b6a0afb26e5023">如果调试过程还有疑问，请点击观看调试全过程</a></p>
<h4 id="总结：对于初学者来说，务必要实际动手操作一遍，特别是调试方法，要熟练掌握，因为以后工程调试时，用到的最多。"><a href="#总结：对于初学者来说，务必要实际动手操作一遍，特别是调试方法，要熟练掌握，因为以后工程调试时，用到的最多。" class="headerlink" title="总结：对于初学者来说，务必要实际动手操作一遍，特别是调试方法，要熟练掌握，因为以后工程调试时，用到的最多。"></a>总结：对于初学者来说，务必要实际动手操作一遍，特别是调试方法，要熟练掌握，因为以后工程调试时，用到的最多。</h4>]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>Keil5</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32PID学习</title>
    <url>/2023/10/01/pid-xue-xi/</url>
    <content><![CDATA[<h1 id="PID教程"><a href="#PID教程" class="headerlink" title="PID教程"></a><strong>PID教程</strong></h1><hr>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781828298.gif" alt="PID参数示意"></p>
<h2 id="一、学习目的"><a href="#一、学习目的" class="headerlink" title="一、学习目的"></a>一、学习目的</h2><p><strong>PID</strong>（比例-积分-微分）是一种经典的<strong>闭环控制算法</strong>，其采用反馈的控制回路机制，用于自动调整系统的输出以接近设定点，，广泛用于工业控制系统和需要连续调制控制的其他各种应用中。它有三个组成部分：<strong>比例项Kp</strong>（根据当前误差调整输出）、<strong>积分项Ki</strong>（减小稳态误差）、<strong>微分项Kd</strong>（减小振荡和响应时间）。通过调整这些部分的权重，PID控制器能够适应不同的系统需求，实现稳定而精确的控制。无论是温度控制、速度调节还是位置控制，PID都是一个重要的工具。</p>
<hr>
<h2 id="二、PID简介"><a href="#二、PID简介" class="headerlink" title="二、PID简介"></a>二、PID简介</h2><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781802782.png" alt="PID.png"></p>
<p><a href="https://www.bilibili.com/video/BV1me4y1s7sE/?spm_id_from=333.337.search-card.all.click&amp;vd_source=65cc1b0c6a89ff46e6b6a0afb26e5023">请观看两分钟PID原理视频</a></p>
<ul>
<li><p><strong>Kp</strong>：比例环节是为了加快响应速度快速达到稳定，能减少误差但不能消除误差。</p>
</li>
<li><p><strong>Ki</strong>：积分环节是为了消除稳态误差，只要系统有误差他就一直积分，稳态后不会出现误差，过大会超调。</p>
</li>
<li><p><strong>Kd</strong>：微分环节预测误差的趋势，减少超调量来克服振荡，使系统稳定性提高。</p>
</li>
</ul>
<hr>
<h2 id="三、位置式PID"><a href="#三、位置式PID" class="headerlink" title="三、位置式PID"></a>三、位置式PID</h2><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781816620.png" alt="PID.png"></p>
<ul>
<li>比例P：e(k)           （此次误差）</li>
<li>积分I：∑e(i)          （误差的累加）</li>
<li>微分D：e(k) - e(k-1)  （此次误差-上次误差）</li>
</ul>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>PID控制</tag>
      </tags>
  </entry>
  <entry>
    <title>RK3588S-Rock5A开机玩耍记录</title>
    <url>/2023/09/10/rk3588s-rock5a-kai-ji-wan-shua/</url>
    <content><![CDATA[<h1 id="RK3588S-Rock5A开机玩耍记录"><a href="#RK3588S-Rock5A开机玩耍记录" class="headerlink" title="RK3588S-Rock5A开机玩耍记录"></a>RK3588S-Rock5A开机玩耍记录</h1><h2 id="下载系统"><a href="#下载系统" class="headerlink" title="下载系统"></a>下载系统</h2><p><a href="https://github.com/radxa-build/rock-5a/releases">镜像下载地址</a></p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1694268263152.png" alt="github界面"><br>可能需要翻个墙，也可以使用GitHub文件下载工具</p>
<p><a href="https://gh.api.99988866.xyz/">github下载文件加速</a></p>
<p>下载后使用<a href="https://balenaetcher.en.softonic.com/">balenaEtcher-Portable</a> 下载到SD卡，建议整好一些的SD卡</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1694268589247.png" alt="镜像烧录软件"></p>
<p>完成后插入SD卡，使用支持快充的供电器进行供电，好像是20W的需要，不然会启动不成功。</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1694271172558.gif" alt="绿灯常亮，蓝灯闪烁"></p>
<h2 id="SSH访问连接"><a href="#SSH访问连接" class="headerlink" title="SSH访问连接"></a>SSH访问连接</h2><p>使用SSH终端工具</p>
<p>扫描以太网共享的IP</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1694272796986.png" alt="IP扫描"></p>
<p>俺的是192.168.137.219</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1694272895199.png" alt="SSH连接"></p>
<p>用户名和密码都是 rock</p>
<h2 id="添加官方软件源-（可以先不添加）"><a href="#添加官方软件源-（可以先不添加）" class="headerlink" title="添加官方软件源 （可以先不添加）"></a>添加官方软件源 （可以先不添加）</h2><p><a href="https://wiki.radxa.com/Rock5/guide/radxa-apt">参考链接</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">DISTRO</span><span class="token operator">=</span>bionic-stable
<span class="token builtin class-name">echo</span> <span class="token string">"deb http://apt.radxa.com/<span class="token variable">$DISTRO</span>/ <span class="token variable">${DISTRO<span class="token operator">%</span>-*}</span> main"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/apt/sources.list.d/apt-radxa-com.list
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="开启VNC远程登录"><a href="#开启VNC远程登录" class="headerlink" title="开启VNC远程登录"></a>开启VNC远程登录</h2><p><strong>下载vncserver</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tigervnc-standalone-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>设置VNC登录密码</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vncpasswd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rock@rock-5a:~$ vncpasswd
Password:
Verify:
Would you like to enter a view-only password <span class="token punctuation">(</span>y/n<span class="token punctuation">)</span>? n
A view-only password is not used
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>添加配置文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.vnc/xstartup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token comment">#!/bin/sh</span>
<span class="token comment"># Start kde Desktop </span>
<span class="token builtin class-name">unset</span> <span class="token environment constant">SESSION_MANAGER</span>
<span class="token builtin class-name">unset</span> <span class="token environment constant">DBUS_SESSION_BUS_ADDRESS</span>
<span class="token assign-left variable">OS</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">`</span></span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$OS</span> <span class="token operator">=</span> <span class="token string">'Linux'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$WINDOWMANAGER</span>"</span> <span class="token keyword">in</span>
    *gnome*<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-e</span> /etc/SuSE-release <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/opt/gnome/bin
        <span class="token builtin class-name">export</span> <span class="token environment constant">PATH</span>
      <span class="token keyword">fi</span>
      <span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token keyword">esac</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-x</span> /etc/X11/xinit/xinitrc <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">exec</span> /etc/X11/xinit/xinitrc
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /etc/X11/xinit/xinitrc <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">exec</span> <span class="token function">sh</span> /etc/X11/xinit/xinitrc
<span class="token keyword">fi</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-r</span> <span class="token environment constant">$HOME</span>/.Xresources <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> xrdb <span class="token environment constant">$HOME</span>/.Xresources
xsetroot <span class="token parameter variable">-solid</span> grey
xterm <span class="token parameter variable">-geometry</span> <span class="token number">80</span>*24+10+10 <span class="token parameter variable">-ls</span> <span class="token parameter variable">-title</span> <span class="token string">"<span class="token variable">$VNCDESKTOP</span> Desktop"</span> <span class="token operator">&amp;</span>
twm <span class="token operator">&amp;</span>
startkde <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>增加可执行权限：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x ~/.vnc/xstartup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>启动vnc服务：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vncserver <span class="token parameter variable">-geometry</span> 1920x1080 <span class="token parameter variable">-alwaysshared</span> <span class="token parameter variable">-depth</span> <span class="token number">24</span> <span class="token parameter variable">-dpi</span> <span class="token number">96</span> :1 <span class="token parameter variable">-localhost</span> no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>查看VNC服务</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vncserver <span class="token parameter variable">-list</span>

TigerVNC server sessions:

X <span class="token environment constant">DISPLAY</span> <span class="token comment">#     RFB PORT #      RFB UNIX PATH   PROCESS ID #    SERVER</span>
<span class="token number">1</span>               <span class="token number">5901</span>                            <span class="token number">3295</span>            Xtigervnc
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用VNC连接即可</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1694316548629.png" alt="登录桌面"></p>
<p><strong>参考链接</strong><br><a href="https://zhuanlan.zhihu.com/p/638955703">给Rock5a开启远程桌面</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>RK3588s</tag>
        <tag>Rock5A</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32F4驱动USB实现虚拟串口</title>
    <url>/2023/07/15/stm32f4-qu-dong-usb-shi-xian-xu-ni-chuan-kou/</url>
    <content><![CDATA[<h1 id="STM32F4驱动USB实现虚拟串口"><a href="#STM32F4驱动USB实现虚拟串口" class="headerlink" title="STM32F4驱动USB实现虚拟串口"></a>STM32F4驱动USB实现虚拟串口</h1><h2 id="实现目的"><a href="#实现目的" class="headerlink" title="实现目的"></a>实现目的</h2><p>使用Dap-link和stlink的时候，就发现这些仿真器上并没有USB转TTL芯片，就可以实现USB转串口，实现虚拟串口，非常方便。这里实测得出，使用USB虚拟串口，可以轻松达到921600波特率，接近1M/s，因为这个虚拟串口实际就是USB通讯，使用USB通讯，模拟COM类通讯端口协议，实现串口通讯。</p>
<p>这个功能主要用于实现单片机通过USB线同上位机通讯，实现速率高（1M/s），稳定性强（USB线+差分信号），操作简单（串口通讯效果）的效果。</p>
<p>最终实现了单片机同上位机进行串口通讯，并编写了类似于HAL库串口通讯的USB串口通信操作函数，包括数据发送，printf发送，堵塞接收，中断接收等函数</p>
<p>注意，此方案单片机作为USB从机，同上位机（主机）通讯，不能够使用USB同使用了USB串口的其他设备通讯，因为他们也是从机。</p>
<h2 id="cubemx初始化"><a href="#cubemx初始化" class="headerlink" title="cubemx初始化"></a>cubemx初始化</h2><p>STM32F407VET6+CubeMx+MDK5</p>
<h3 id="系统时钟初始化"><a href="#系统时钟初始化" class="headerlink" title="系统时钟初始化"></a>系统时钟初始化</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F1.%E5%A4%96%E9%83%A8%E9%AB%98%E9%80%9F%E6%97%B6%E9%92%9F%E5%88%9D%E5%A7%8B%E5%8C%96.jpg" alt="外部高速时钟初始化"></p>
<h3 id="修改debug方式"><a href="#修改debug方式" class="headerlink" title="修改debug方式"></a>修改debug方式</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F2.%E8%B0%83%E8%AF%95%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE.jpg" alt="调试方式修改"></p>
<h3 id="GPIO配置"><a href="#GPIO配置" class="headerlink" title="GPIO配置"></a>GPIO配置</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F3.%E6%8C%89%E9%94%AE%20led%E9%85%8D%E7%BD%AE.jpg" alt="按键led配置"></p>
<h3 id="USB外设初始化"><a href="#USB外设初始化" class="headerlink" title="USB外设初始化"></a>USB外设初始化</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F4.%E5%85%A8%E9%80%9FUSB%E5%A4%96%E8%AE%BE%E5%88%9D%E5%A7%8B%E5%8C%96.jpg" alt="全速USB外设初始化"></p>
<p>啥都不用改，把中断打开记得</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F5.%E4%B8%AD%E6%96%AD%E5%88%9D%E5%A7%8B%E5%8C%96.jpg" alt="中断配置"></p>
<h3 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F6.%E6%97%B6%E9%92%9F%E4%BF%AE%E6%94%B9.jpg" alt="修改时钟"></p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F7.%E5%B7%A5%E7%A8%8B%E5%88%9D%E5%A7%8B%E5%8C%96.jpg" alt="配置工程"></p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F8.%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE.jpg" alt="目录修改"></p>
<h3 id="keil5修改"><a href="#keil5修改" class="headerlink" title="keil5修改"></a>keil5修改</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F9.keil%E9%85%8D%E7%BD%AE.jpg" alt="勾选Micolib"></p>
<p><strong>初始化完成</strong></p>
<h2 id="实现HAL库uart通讯功能"><a href="#实现HAL库uart通讯功能" class="headerlink" title="实现HAL库uart通讯功能"></a>实现HAL库uart通讯功能</h2><p><strong>简单使用系统函数 <code>uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)</code>进行通讯</strong></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">/* USER CODE END WHILE */</span>

    <span class="token comment">/* USER CODE BEGIN 3 */</span>
      led_GPIO_Port<span class="token operator">-&gt;</span>ODR<span class="token operator">^=</span>led_Pin<span class="token punctuation">;</span>

      <span class="token function">CDC_Transmit_FS</span><span class="token punctuation">(</span>Tx_Buffer<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>Tx_Buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F10.%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95%E5%8A%A9%E6%89%8B%E6%88%AA%E5%9B%BE.jpg" alt="效果"></p>
<h3 id="设计USB-CDC-printf格式化输出函数"><a href="#设计USB-CDC-printf格式化输出函数" class="headerlink" title="设计USB_CDC_printf格式化输出函数"></a><strong>设计USB_CDC_printf格式化输出函数</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
  * @brief  USB虚拟串口格式化输出printf实现
  * @param  格式化输入
  * @retval 无
  */</span>
<span class="token keyword">void</span> <span class="token function">usb_printf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    va_list args<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> length<span class="token punctuation">;</span>
 
    <span class="token function">va_start</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>
    length <span class="token operator">=</span> <span class="token function">vsnprintf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>UserTxBufferFS<span class="token punctuation">,</span> APP_TX_DATA_SIZE<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>format<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">va_end</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CDC_Transmit_FS</span><span class="token punctuation">(</span>UserTxBufferFS<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>USB虚拟串口主要使用CDC通讯协议，在usbd_cdc_if.c文件中，有相关函数描述，其中数据中断接收回调函数需要重点关注</strong></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token class-name">int8_t</span> <span class="token function">CDC_Receive_FS</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> Buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span>Len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE BEGIN 6 */</span>
  
  <span class="token comment">/* 定义外部变量 */</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint16_t</span> Rx_Date_Num<span class="token punctuation">,</span>RX_goal_num<span class="token punctuation">;</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint8_t</span> UserRxBuffer<span class="token punctuation">[</span>APP_RX_DATA_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint8_t</span> Rx_status<span class="token punctuation">;</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint8_t</span><span class="token operator">*</span> p<span class="token punctuation">;</span>

  <span class="token comment">/* 保存接收到的数据 */</span>
  <span class="token function">Rx_date_save</span><span class="token punctuation">(</span>Buf<span class="token punctuation">,</span>UserRxBuffer<span class="token punctuation">,</span><span class="token operator">*</span>Len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 如果接收到的数据量小于或等于缓冲区大小，增加接收数据的数量 */</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_Date_Num<span class="token operator">&lt;=</span>APP_RX_DATA_SIZE<span class="token punctuation">)</span>
      Rx_Date_Num<span class="token operator">+=</span><span class="token operator">*</span>Len<span class="token punctuation">;</span>
  <span class="token comment">/* 如果接收到的数据量大于缓冲区大小，将接收数据的数量设置为缓冲区大小 */</span>
  <span class="token keyword">else</span>
      Rx_Date_Num<span class="token operator">=</span>APP_RX_DATA_SIZE<span class="token punctuation">;</span>

  <span class="token comment">/* 如果接收状态为0 */</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_status<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">/* 如果接收到的数据量大于或等于目标数据量 */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_Date_Num<span class="token operator">&gt;=</span>RX_goal_num<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token comment">/* 将用户接收缓冲区的数据复制到p指向的位置 */</span>
      <span class="token function">Rx_buffer_copy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>UserRxBuffer<span class="token punctuation">,</span>RX_goal_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">/* 减少接收数据的数量 */</span>
        Rx_Date_Num<span class="token operator">-=</span>RX_goal_num<span class="token punctuation">;</span>
      <span class="token comment">/* 将接收状态设置为1 */</span>
      Rx_status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/* 设置USB设备的接收缓冲区 */</span>
  <span class="token function">USBD_CDC_SetRxBuffer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hUsbDeviceFS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 接收USB数据包 */</span>
  <span class="token function">USBD_CDC_ReceivePacket</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hUsbDeviceFS<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 返回操作结果 */</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>USBD_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END 6 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>虚拟串口的接收方式是覆盖式的，相关缓存区大小由宏定义 APP_RX_DATA_SIZE 确定</strong></p>
<p><strong>比方说，本次接受了8个字节数据，分别是，“12345678”，然后发送了4个字节数据，分别是“abcd”，则缓存区数据变为“abcd5678”，原数据会被覆盖</strong></p>
<p><strong>这样是不利于我们接收数据的，如果我要接收128个字节的数据，为防止数据丢失，我会设置256个字节宽度的缓存区，原系统的接受到的数据会被及时转存到用户自定义的缓存区内，随取随用。</strong></p>
<p><strong>所以代码里我们定义了<code>uint8_t UserRxBuffer[APP_RX_DATA_SIZE];</code>用于存储用户想要接收的信息，放置被覆盖，并定义了相关函数，操作读取数据</strong></p>
<h3 id="堵塞型数据接收函数"><a href="#堵塞型数据接收函数" class="headerlink" title="堵塞型数据接收函数*"></a><em>堵塞型数据接收函数</em>*</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
  * @brief  这个函数用于接收USB虚拟串口的数据
  * @param  Rx_Buffer: 接收缓冲区
  * @param  num: 需要接收的数据数量
  * @param  overtime: 超时时间
  * @retval 如果接收成功，返回1，如果超时，返回0
  */</span>
 
<span class="token class-name">uint8_t</span> <span class="token function">usb_vbc_Receive</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> Rx_Buffer<span class="token punctuation">,</span><span class="token class-name">uint16_t</span> num<span class="token punctuation">,</span><span class="token class-name">uint32_t</span> overtime<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> time<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    overtime<span class="token operator">=</span>overtime<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_Date_Num<span class="token operator">&gt;=</span>num<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">Rx_buffer_copy</span><span class="token punctuation">(</span>Rx_Buffer<span class="token punctuation">,</span>UserRxBuffer<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Rx_Date_Num<span class="token operator">-=</span>num<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_Date_Num<span class="token operator">&gt;=</span>num<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">Rx_buffer_copy</span><span class="token punctuation">(</span>Rx_Buffer<span class="token punctuation">,</span>UserRxBuffer<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Rx_Date_Num<span class="token operator">-=</span>num<span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
                time<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>time<span class="token operator">&gt;</span>overtime<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="中断型数据接收函数"><a href="#中断型数据接收函数" class="headerlink" title="中断型数据接收函数"></a>中断型数据接收函数</h3><p><strong>内容较少，仅改变几个全局标志位的值，主要操作内容在中断回调函数里</strong></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
  * @brief  开启接收数据，不堵塞，完成接收任务后，全局变量Rx_status置一，否则为0
  * @param  Rx_Buffer: 接收缓冲区
  * @param  num: 需要接收的数据数量
  * @retval 无
  */</span>
<span class="token keyword">void</span> <span class="token function">usb_vbc_Receive_It</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> Rx_Buffer<span class="token punctuation">,</span><span class="token class-name">uint16_t</span> num<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    p<span class="token operator">=</span>Rx_Buffer<span class="token punctuation">;</span>
    RX_goal_num<span class="token operator">=</span>num<span class="token punctuation">;</span>
    Rx_status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>中断回调函数内的操作</strong></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token class-name">int8_t</span> <span class="token function">CDC_Receive_FS</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> Buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span>Len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE BEGIN 6 */</span>
  
  <span class="token comment">/* 定义外部变量 */</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint16_t</span> Rx_Date_Num<span class="token punctuation">,</span>RX_goal_num<span class="token punctuation">;</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint8_t</span> UserRxBuffer<span class="token punctuation">[</span>APP_RX_DATA_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint8_t</span> Rx_status<span class="token punctuation">;</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint8_t</span><span class="token operator">*</span> p<span class="token punctuation">;</span>

  <span class="token comment">/* 保存接收到的数据 */</span>
  <span class="token function">Rx_date_save</span><span class="token punctuation">(</span>Buf<span class="token punctuation">,</span>UserRxBuffer<span class="token punctuation">,</span><span class="token operator">*</span>Len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 如果接收到的数据量小于或等于缓冲区大小，增加接收数据的数量 */</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_Date_Num<span class="token operator">&lt;=</span>APP_RX_DATA_SIZE<span class="token punctuation">)</span>
      Rx_Date_Num<span class="token operator">+=</span><span class="token operator">*</span>Len<span class="token punctuation">;</span>
  <span class="token comment">/* 如果接收到的数据量大于缓冲区大小，将接收数据的数量设置为缓冲区大小 */</span>
  <span class="token keyword">else</span>
      Rx_Date_Num<span class="token operator">=</span>APP_RX_DATA_SIZE<span class="token punctuation">;</span>

  <span class="token comment">/* 如果接收状态为0 */</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_status<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">/* 如果接收到的数据量大于或等于目标数据量 */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_Date_Num<span class="token operator">&gt;=</span>RX_goal_num<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token comment">/* 将用户接收缓冲区的数据复制到p指向的位置 */</span>
      <span class="token function">Rx_buffer_copy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>UserRxBuffer<span class="token punctuation">,</span>RX_goal_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">/* 减少接收数据的数量 */</span>
        Rx_Date_Num<span class="token operator">-=</span>RX_goal_num<span class="token punctuation">;</span>
      <span class="token comment">/* 将接收状态设置为1 */</span>
      Rx_status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/* 设置USB设备的接收缓冲区 */</span>
  <span class="token function">USBD_CDC_SetRxBuffer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hUsbDeviceFS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 接收USB数据包 */</span>
  <span class="token function">USBD_CDC_ReceivePacket</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hUsbDeviceFS<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 返回操作结果 */</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>USBD_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END 6 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="其他相关数据操作函数"><a href="#其他相关数据操作函数" class="headerlink" title="其他相关数据操作函数"></a>其他相关数据操作函数</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
  * @brief  这个函数用于复制接收缓冲区的内容，并将缓存区数据移位
  * @param  Buffer_get: 获取缓冲区
  * @param  Buffer_put: 放置缓冲区
  * @param  num: 要复制的元素数量
  * @retval 无
  */</span>

<span class="token keyword">void</span> <span class="token function">Rx_buffer_copy</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> Buffer_get<span class="token punctuation">,</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> Buffer_put<span class="token punctuation">,</span><span class="token class-name">uint16_t</span> num<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//复制数据</span>
    <span class="token punctuation">{</span>
        Buffer_get<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Buffer_put<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Rx_Date_Num<span class="token operator">-</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//剩余数据移位</span>
    <span class="token punctuation">{</span>
        Buffer_put<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Buffer_put<span class="token punctuation">[</span>i<span class="token operator">+</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
  * @brief  这个函数用于将一个数组的内容复制到另一个数组中，而不会丢失接收数组中的原始数据
  * @param  src: 源数组
  * @param  dest: 目标数组
  * @param  n: 源数组中的元素数量
  * @retval 无
  */</span>
<span class="token keyword">void</span> <span class="token function">Rx_date_save</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> src<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token operator">=</span>Rx_Date_Num<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">+</span>n<span class="token operator">&gt;</span>APP_RX_DATA_SIZE<span class="token punctuation">)</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//超出缓存区大小，这里直接停止。</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        dest<span class="token punctuation">[</span>i<span class="token operator">+</span>num<span class="token punctuation">]</span><span class="token operator">=</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
  * @brief  这个函数用于获取USB接收缓存区的数据数量
  * @param  无
  * @retval 返回接收的数据数量
  */</span>

<span class="token class-name">uint16_t</span> <span class="token function">usb_Rx_Get_Num</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> Rx_Date_Num<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE BEGIN 1 */</span>
    <span class="token class-name">uint8_t</span> Rx_Buffer<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> Tx_Buffer<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"灵遨老六\n"</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END 1 */</span>

  <span class="token comment">/* MCU Configuration--------------------------------------------------------*/</span>

  <span class="token comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span>
  <span class="token function">HAL_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* USER CODE BEGIN Init */</span>

  <span class="token comment">/* USER CODE END Init */</span>

  <span class="token comment">/* Configure the system clock */</span>
  <span class="token function">SystemClock_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* USER CODE BEGIN SysInit */</span>

  <span class="token comment">/* USER CODE END SysInit */</span>

  <span class="token comment">/* Initialize all configured peripherals */</span>
  <span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">MX_USB_DEVICE_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE BEGIN 2 */</span>
    <span class="token function">usb_vbc_Receive_It</span><span class="token punctuation">(</span>Rx_Buffer<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END 2 */</span>

  <span class="token comment">/* Infinite loop */</span>
  <span class="token comment">/* USER CODE BEGIN WHILE */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">/* USER CODE END WHILE */</span>

    <span class="token comment">/* USER CODE BEGIN 3 */</span>
      led_GPIO_Port<span class="token operator">-&gt;</span>ODR<span class="token operator">^=</span>led_Pin<span class="token punctuation">;</span>
<span class="token comment">//      time=HAL_GetTick();</span>
<span class="token comment">//      CDC_Transmit_FS((uint8_t*)str, strlen(str));</span>
<span class="token comment">//      if(usb_vbc_Receive(Rx_Buffer,16,500)==0)</span>
<span class="token comment">//          usb_printf("超时:%d\n",HAL_GetTick()-time);</span>
<span class="token comment">//      else</span>
<span class="token comment">//          CDC_Transmit_FS((uint8_t*)Rx_Buffer, 16);</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_status<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
          <span class="token function">CDC_Transmit_FS</span><span class="token punctuation">(</span>Rx_Buffer<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">usb_vbc_Receive_It</span><span class="token punctuation">(</span>Rx_Buffer<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token comment">//      CDC_Transmit_FS(Tx_Buffer,strlen((char*)Tx_Buffer));</span>
      <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/* USER CODE END 3 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>使用USB虚拟串口，用起来很爽，波特率能跑很高，主要可以应用在同ROS主机通讯上；具体细致学习，可以参考开源Dap-link的代码。</strong></p>
<p><a href="dap-link">dap-link</a></p>
<p><strong>另外想使用DMA的话，F4的还没实现，H7的可以，速度应该可以跑很高。</strong></p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>F407</tag>
        <tag>USB</tag>
        <tag>虚拟串口</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32 Systick定时器延时</title>
    <url>/2023/10/01/systick-ding-shi-qi-yan-shi/</url>
    <content><![CDATA[<h1 id="Systick定时器延时"><a href="#Systick定时器延时" class="headerlink" title="Systick定时器延时"></a><strong>Systick定时器延时</strong></h1><h2 id="一、系统定时器"><a href="#一、系统定时器" class="headerlink" title="一、系统定时器"></a>一、系统定时器</h2><hr>
<h3 id="1-目的"><a href="#1-目的" class="headerlink" title="1. 目的"></a>1. 目的</h3><p>Systick定时器常用来做延时，或者实时系统的心跳时钟。这样可以节省MCU资源，不用浪费一个定时器。</p>
<h3 id="2-简介"><a href="#2-简介" class="headerlink" title="2. 简介"></a>2. 简介</h3><p>SysTick 叫做系统滴答时钟、系统定时器，属于 Cortex-M4内核中的一个外设(外围设备)，也是属于NVIC的一部分，并且是24bit向下递减的计数器。</p>
<p><strong>==最大计数：==</strong> 2^24-1 （向下计数到0，然后触发中断）</p>
<h3 id="3-SysTick寄存器"><a href="#3-SysTick寄存器" class="headerlink" title="3. SysTick寄存器"></a>3. SysTick寄存器</h3><table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">寄存器</th>
<th align="center">名称</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">CTRL</td>
<td align="center">Systick控制和状态寄存器</td>
<td align="center">使能Systick定时器并设置时钟源</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">LOAD</td>
<td align="center">Systick自动重装载寄存器</td>
<td align="center">当倒数至零时，将被重装载值</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">VAL</td>
<td align="center">Systick当前值寄存器</td>
<td align="center">读取时返回当前倒数值，写它则使之清零</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">CALB</td>
<td align="center">Systick校准值寄存器</td>
<td align="center">不常用</td>
</tr>
</tbody></table>
<h4 id="（1）Systick控制和状态寄存器"><a href="#（1）Systick控制和状态寄存器" class="headerlink" title="（1）Systick控制和状态寄存器"></a>（1）Systick控制和状态寄存器</h4><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696781991874.png" alt="Sys-Tick.png"></p>
<p>==外部时钟==是 HCLK(AHB总线时钟) 的1/8  （stm32f401 是 168/8=21M）<br>==内核时钟==是 HCLK时钟 （stm32f401 是 84M）</p>
<h4 id="（2）Systick自动重装载寄存器"><a href="#（2）Systick自动重装载寄存器" class="headerlink" title="（2）Systick自动重装载寄存器"></a>（2）Systick自动重装载寄存器</h4><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696782004933.png" alt="Sys-Tick.png"></p>
<h4 id="（3）Systick当前值寄存器"><a href="#（3）Systick当前值寄存器" class="headerlink" title="（3）Systick当前值寄存器"></a>（3）Systick当前值寄存器</h4><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696782018281.png" alt="Sys-Tick.png"></p>
<h4 id="（4）Systick校准值寄存器"><a href="#（4）Systick校准值寄存器" class="headerlink" title="（4）Systick校准值寄存器"></a>（4）Systick校准值寄存器</h4><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696782030472.png" alt="Sys-Tick.png"></p>
<h3 id="4-计时原理"><a href="#4-计时原理" class="headerlink" title="4. 计时原理"></a>4. 计时原理</h3><blockquote>
<p><strong>time = 中断次数*一次中断时间</strong><br>重装载次数为n，一次中断时间为t=1/SYSCLK，中断时间为T;<br><strong>T = n * t</strong></p>
</blockquote>
<hr>
<h2 id="二、精准延时函数"><a href="#二、精准延时函数" class="headerlink" title="二、精准延时函数"></a>二、精准延时函数</h2><h3 id="1-固件库函数延时"><a href="#1-固件库函数延时" class="headerlink" title="1. 固件库函数延时"></a>1. 固件库函数延时</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//全局变量</span>
<span class="token keyword">void</span> <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
  	<span class="token comment">//uint32_t SystemCoreClock = 84000000;</span>
  	<span class="token comment">//SystemFrequency / 1000     1ms    中断一次</span>
  	<span class="token comment">//SystemFrequency / 100000   10us   中断一次</span>
  	<span class="token comment">//SystemFrequency / 1000000  1us    中断一次</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">SysTick_Config</span><span class="token punctuation">(</span>SystemCoreClock<span class="token operator">/</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">/*让系统中断一次耗时1us*/</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">delay_us</span><span class="token punctuation">(</span>__IO u32 nTime<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    n <span class="token operator">=</span>nTime<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">delay_ms</span><span class="token punctuation">(</span>__IO u32 nTime<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    n <span class="token operator">=</span>nTime<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">SysTick_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0x00</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        n<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-寄存器延时"><a href="#2-寄存器延时" class="headerlink" title="2. 寄存器延时"></a>2. 寄存器延时</h3><h5 id="寄存器延时比固件库函数写的更精简，推荐使用这种延时。"><a href="#寄存器延时比固件库函数写的更精简，推荐使用这种延时。" class="headerlink" title="寄存器延时比固件库函数写的更精简，推荐使用这种延时。"></a>寄存器延时比固件库函数写的更精简，推荐使用这种延时。</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>     <span class="token macro-name">PLL_m</span>       <span class="token expression"><span class="token number">8</span></span></span>

<span class="token comment">/*----------------Systick微秒级延时----------------*/</span>
<span class="token keyword">void</span> <span class="token function">delay_us</span><span class="token punctuation">(</span>u32 nus<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
 u32 temp<span class="token punctuation">;</span>
 
 SysTick<span class="token operator">-&gt;</span>LOAD <span class="token operator">=</span> SystemCoreClock<span class="token operator">/</span>PLL_m<span class="token operator">/</span><span class="token number">1000000</span><span class="token operator">*</span>nus<span class="token punctuation">;</span><span class="token comment">//设置重装载值 = 84000000/8/1000000 * n    (1us中断一次)</span>
 
 SysTick<span class="token operator">-&gt;</span>VAL<span class="token operator">=</span><span class="token number">0X00</span><span class="token punctuation">;</span><span class="token comment">//清空计数器</span>
 SysTick<span class="token operator">-&gt;</span>CTRL<span class="token operator">=</span><span class="token number">0X01</span><span class="token punctuation">;</span><span class="token comment">//使能，减到零是无动作，采用外部时钟源</span>
 <span class="token keyword">do</span>
 <span class="token punctuation">{</span>
  temp<span class="token operator">=</span>SysTick<span class="token operator">-&gt;</span>CTRL<span class="token punctuation">;</span><span class="token comment">//读取当前倒计数值</span>
 <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>temp<span class="token operator">&amp;</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>temp<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待时间到达</span>
 
    SysTick<span class="token operator">-&gt;</span>CTRL<span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span> <span class="token comment">//关闭计数器</span>
    SysTick<span class="token operator">-&gt;</span>VAL <span class="token operator">=</span><span class="token number">0X00</span><span class="token punctuation">;</span> <span class="token comment">//清空计数器</span>
<span class="token punctuation">}</span>

<span class="token comment">/*----------------Systick毫秒级延时----------------*/</span>
<span class="token keyword">void</span> <span class="token function">delay_ms</span><span class="token punctuation">(</span>u16 nms<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
 u32 temp<span class="token punctuation">;</span>
 SysTick<span class="token operator">-&gt;</span>LOAD <span class="token operator">=</span> SystemCoreClock<span class="token operator">/</span>PLL_m<span class="token operator">/</span><span class="token number">1000</span><span class="token operator">*</span>nms<span class="token punctuation">;</span><span class="token comment">//设置重装载值 = 84000000/8/1000 * n  (1ms中断一次)</span>
 SysTick<span class="token operator">-&gt;</span>VAL<span class="token operator">=</span><span class="token number">0X00</span><span class="token punctuation">;</span><span class="token comment">//清空计数器</span>
 SysTick<span class="token operator">-&gt;</span>CTRL<span class="token operator">=</span><span class="token number">0X01</span><span class="token punctuation">;</span><span class="token comment">//使能，减到零是无动作，采用外部时钟源</span>
 <span class="token keyword">do</span>
 <span class="token punctuation">{</span>
  temp<span class="token operator">=</span>SysTick<span class="token operator">-&gt;</span>CTRL<span class="token punctuation">;</span><span class="token comment">//读取当前倒计数值</span>
 <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>temp<span class="token operator">&amp;</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>temp<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待时间到达</span>
    SysTick<span class="token operator">-&gt;</span>CTRL<span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span> <span class="token comment">//关闭计数器</span>
    SysTick<span class="token operator">-&gt;</span>VAL <span class="token operator">=</span><span class="token number">0X00</span><span class="token punctuation">;</span> <span class="token comment">//清空计数器</span>
<span class="token punctuation">}</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-软延时"><a href="#3-软延时" class="headerlink" title="3. 软延时"></a>3. 软延时</h3><h5 id="在延时精度要求低的情况下建议采用软延时，减少中断次数。"><a href="#在延时精度要求低的情况下建议采用软延时，减少中断次数。" class="headerlink" title="在延时精度要求低的情况下建议采用软延时，减少中断次数。"></a>在延时精度要求低的情况下建议采用软延时，减少中断次数。</h5><pre class="line-numbers language-none"><code class="language-none">/*----------------软微秒级延时----------------*/
void Delay_us(uint32_t Delay_us)
{    
  volatile unsigned int num;
  volatile unsigned int t;
 
  
  for (num = 0; num &lt; Delay_us; num++)
  {
    t = 11;
    while (t != 0)
    {
      t--;
    }
  }
}
/*----------------软毫秒级延时----------------*/
void Delay_ms(uint16_t Delay_ms)
{    
  volatile unsigned int num;
  for (num = 0; num &lt; Delay_ms; num++)
  {
    Delay_us(1000);
  }
}

/*----------------软I2C延时----------------*/
void I2C_Delay(void)
{
	uint8_t i;

	for (i = 0; i &lt; 100; i++);
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="三、编程总结"><a href="#三、编程总结" class="headerlink" title="三、编程总结"></a>三、编程总结</h2><ol>
<li>注意systick的时钟,首先需要先设置systick时钟源。</li>
<li>接着设置重装载寄存器的值。</li>
<li>清除当前数值寄存器的值。</li>
<li>配置控制与状态寄存器。</li>
<li>在main函数中循环调用延时函数实现灯闪烁。</li>
<li>systick延时在之后起着重要作用，许多程序涉及到延时函数的调用，因此写好一个精准的延时函数必不可少！</li>
</ol>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>Systick定时器</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32定时器功能介绍</title>
    <url>/2023/10/01/tim/</url>
    <content><![CDATA[<h1 id="TIM定时器"><a href="#TIM定时器" class="headerlink" title="TIM定时器"></a>TIM定时器</h1><p>定时器 (Timer) 最基本的功能就是定时了，比如定时发送USART 数据、定时采集 AD 数据等等。如果把定时器与 GPIO 结合起来使用的话可以实现非常丰富的功能，可以测量输入信号的脉冲宽度，可以生产输出波形。定时器生产 PWM 控制电机状态是工业控制普遍方法，这方面知识非常有必要深入了解。</p>
<p>STM32F103 有众多的定时器，其中包括 2 个基本定时器（TIM6 和 TIM7）、4 个通用定时器（TIM2~TIM5）、2 个高级控制定时器（TIM1 和 TIM8），这些定时器彼此完全独立，不共享任何资源。为了更好的区别各个定时器的特性，我制作了一个表格。</p>
<table>
<thead>
<tr>
<th>定时器类型</th>
<th>定时器</th>
<th>定时器位数</th>
<th>计数模式</th>
<th>预分频系数（整数）</th>
<th>产生DMA 请求</th>
<th>捕获/比较通道</th>
<th>互补输出</th>
</tr>
</thead>
<tbody><tr>
<td>基本定时器</td>
<td>TIM6，TIM7</td>
<td>16</td>
<td>递增</td>
<td>1~65536</td>
<td>可以</td>
<td>0</td>
<td>无</td>
</tr>
<tr>
<td>通用定时器</td>
<td>TIM2，TIM3<br>TIM4，TIM5</td>
<td>16</td>
<td>递增、递减、中央对齐</td>
<td>1~65536</td>
<td>可以</td>
<td>4</td>
<td>无</td>
</tr>
<tr>
<td>高级定时器</td>
<td>TIM1，TIM8</td>
<td>16</td>
<td>递增、递减、中央对齐</td>
<td>1~65536</td>
<td>可以</td>
<td>4</td>
<td>有</td>
</tr>
</tbody></table>
<p>STM32F103C8T6定时器资源：TIM1,TIM2,TIM3,TIM4</p>
<h2 id="基本定时器"><a href="#基本定时器" class="headerlink" title="基本定时器"></a>基本定时器</h2><p>F103c8t6并不含有基本定时器资源，但基本定时器比高级控制定时器和通用定时器功能少，结构简单，理解起来更容易.就功能上来说通用定时器包含所有基本定时器功能，而高级控制定时器包含通用定时器所有功能。所以高级控制定时器功能繁多，但也是最难理解的，本章我们先选择最简单的基本定时器进行讲解。基本定时器主要两个功能，第一就是基本定时功能，生成时基，第二就是专门用于驱动数模转换器(DAC)。驱动DAC部分本文章不做过多描述。</p>
<p>F103有两个基本定时器TIM6和TIM7，功能完全一样，但所用资源彼此都完全独立，可以同时使用。在本章内容中，以TIMx统称基本定时器。</p>
<p>基本上定时器 TIM6 和 TIM7 是一个 16 位向上递增的定时器，当我在自动重载寄存器(TIMx_ARR) 添加一个计数值后并使能 TIMx，计数寄存器 (TIMx_CNT) 就会从 0 开始递增，当TIMx_CNT 的数值与 TIMx_ARR 值相同时就会生成事件并把 TIMx_CNT 寄存器清 0，完成一次循环过程。如果没有停止定时器就循环执行上述过程。这些只是大概的流程，希望大家有个感性认识，下面细讲整个过程。</p>
<h3 id="基本定时器功能框图"><a href="#基本定时器功能框图" class="headerlink" title="基本定时器功能框图"></a>基本定时器功能框图</h3><p>基本定时器的功能框图包含了基本定时器最核心内容，掌握了功能框图，对基本定时器就有一个整体的把握，在编程时思路就非常清晰，见图基本定时器功能框图。</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696779146907.png" alt="基本定时器功能框图"></p>
<p>首先先看图基本定时器功能框图 中绿色框内容，第一个是带有阴影的方框，方框内容一般是一个寄存器名称，比如图中主体部分的自动重载寄存器 (TIMx_ARR) 或 PSC 预分频器 (TIMx_PSC)，这里要特别突出的是阴影这个标志的作用，它表示这个寄存器还自带有影子寄存器，在硬件结构上实际是有两个寄存器，源寄存器是我们可以进行读写操作，而影子寄存器我们是完全无法操作的，有内部硬件使用。影子寄存器是在程序运行时真正起到作用的，源寄存器只是给我们读写用的，只有在特定时候 (特定事件发生时) 才把源寄存器的值拷贝给它的影子寄存器。多个影子寄存器一起使用可以到达同步更新多个寄存器内容的目的。<br>接下来是一个指向右下角的图标，它表示一个事件，而一个指向右上角的图标表示中断和 DMA 输出。这个我们把它放在图中主体更好理解。图中的自动重载寄存器有影子寄存器，它左边有一 个带有“U”字母的事件图标，表示在更新事件生成时就把自动重载寄存器内容拷贝到影子寄存 器内，这个与上面分析是一致。寄存器右边的事件图标、中断和 DMA 输出图标表示在自动重载 寄存器值与计数器寄存器值相等时生成事件、中断和 DMA 输出。</p>
<h3 id="时钟源"><a href="#时钟源" class="headerlink" title="时钟源"></a>时钟源</h3><p>定时器要实现计数必须有个时钟源，基本定时器时钟只能来自内部时钟，高级控制定时器和通用定时器还可以选择外部时钟源或者直接来自其他定时器等待模式。我们可以通过 RCC 专用时钟配置寄存器 (RCC_DCKCFGR) 的 TIMPRE 位设置所有定时器的时钟频率，我们一般设置该位为默认值 0，即 TIMxCLK 为总线时钟的两倍，使得表各个定时器特性 中可选的最大定时器时钟为84MHz，即基本定时器的内部时钟 (CK_INT) 频率为 84MHz。基本定时器只能使用内部时钟，当 TIM6 和 TIM7 控制寄存器 1(TIMx_CR1) 的 CEN 位置 1 时，启动基本定时器，并且预分频器的时钟来源就是 CK_INT。对于高级控制定时器和通用定时器的时钟源可以来找控制器外部时钟、其他定时器等等模式，较为复杂，会在相关教程中详细介绍。</p>
<h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><p>基本定时器计数过程主要涉及到三个寄存器内容，分别是计数器寄存器 (TIMx_CNT)、预分频器寄存器 (TIMx_PSC)、自动重载寄存器 (TIMx_ARR)，这三个寄存器都是 16 位有效数字，即可设置值为 0 至 65535。<br>首先我们来看图基本定时器功能框图 中预分频器 PSC，它有一个输入时钟 CK_PSC 和一个输出时钟 CK_CNT。输入时钟 CK_PSC 来源于控制器部分，基本定时器只有内部时钟源所以 CK_PSC 实际等于 CK_INT，即 90MHz。在不同应用场所，经常需要不同的定时频率，通过设置预分频器 PSC的值可以非常方便得到不同的 CK_CNT，实际计算为：fCK_CNT 等于 fCK_PSC/(PSC[15:0]+1)。图基本定时器时钟源分频 是将预分频器 PSC 的值从 1 改为 4 时计数器时钟变化过程。原来是 1 分频，CK_PSC 和 CK_CNT 频率相同。向 TIMx_PSC 寄存器写入新值时，并不会马上更新 CK_CNT输出频率，而是等到更新事件发生时，把 TIMx_PSC 寄存器值更新到影子寄存器中，使其真正产生效果。更新为 4 分频后，在CK_PSC 连续出现 4 个脉冲后 CK_CNT 才产生一个脉冲。<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696779163480.png" alt="计数器"></p>
<h3 id="定时器周期计算"><a href="#定时器周期计算" class="headerlink" title="定时器周期计算"></a>定时器周期计算</h3><p>经过上面分析，我们知道定时事件生成时间主要由 TIMx_PSC 和 TIMx_ARR 两个寄存器值决定，这个也就是定时器的周期。比如我们需要一个 1s 周期的定时器，具体这两个寄存器值该如何设置内。假设，我们先设置 TIMx_ARR 寄存器值为 9999，即当 TIMx_CNT 从 0 开始计算，刚好等于 9999 时生成事件，总共计数 10000 次，那么如果此时时钟源周期为 100us 即可得到刚好 1s 的定时周期。<br>接下来问题就是设置 TIMx_PSC 寄存器值使得 CK_CNT 输出为 100us 周期 (10000Hz) 的时钟。预分频器的输入时钟 CK_PSC 为 84MHz，所以设置预分频器值为 (8400-1) 即可满足。</p>
<h3 id="定时器初始化结构体详解"><a href="#定时器初始化结构体详解" class="headerlink" title="定时器初始化结构体详解"></a>定时器初始化结构体详解</h3><p>标 准 库 函 数 对 定 时 器 外 设 建 立 了 四 个 初 始 化 结 构 体， 基 本 定 时 器 只 用 到 其 中 一 个 即TIM_TimeBaseInitTypeDef，该结构体成员用于设置定时器基本工作参数，并由定时器基本初始化配置函数 TIM_TimeBaseInit 调用，这些设定参数将会设置定时器相应的寄存器，达到配置定时器工作环境的目的。这一章我们只介绍 TIM_TimeBaseInitTypeDef 结构体，其他结构体将在相关教程中介绍。<br>初始化结构体和初始化库函数配合使用是标准库精髓所在，理解了初始化结构体每个成员意义基本上就可以对该外设运用自如了。初始化结构体定义在 stm32f4xx_tim.h 文件中，初始化库函数定义在 stm32f4xx_tim.c 文件中，编程时我们可以结合这两个文件内注释使用。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token class-name">uint16_t</span> TIM_Prescaler<span class="token punctuation">;</span> <span class="token comment">// 预分频器</span>
	<span class="token class-name">uint16_t</span> TIM_CounterMode<span class="token punctuation">;</span> <span class="token comment">// 计数模式</span>
	<span class="token class-name">uint32_t</span> TIM_Period<span class="token punctuation">;</span> <span class="token comment">// 定时器周期</span>
	<span class="token class-name">uint16_t</span> TIM_ClockDivision<span class="token punctuation">;</span> <span class="token comment">// 时钟分频</span>
	<span class="token class-name">uint8_t</span> TIM_RepetitionCounter<span class="token punctuation">;</span> <span class="token comment">// 重复计算器</span>
<span class="token punctuation">}</span> TIM_TimeBaseInitTypeDef<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(1) TIM_Prescaler：定时器预分频器设置，时钟源经该预分频器才是定时器时钟，它设定 TIMx_PSC寄存器的值。可设置范围为 0 至 65535，实现 1 至 65536 分频。<br>(2) TIM_CounterMode：定时器计数方式，可是在为向上计数、向下计数以及三种中心对齐模式。基本定时器只能是向上计数，即 TIMx_CNT 只能从 0 开始递增，并且无需初始化。<br>(3) TIM_Period：定时器周期，实际就是设定自动重载寄存器的值，在事件生成时更新到影子寄存器。可设置范围为 0 至 65535。<br>(4) TIM_ClockDivision：时钟分频，设置定时器时钟 CK_INT 频率与数字滤波器采样时钟频率分频比，基本定时器没有此功能，不用设置。<br>(5) TIM_RepetitionCounter：重复计数器，属于高级控制寄存器专用寄存器位，利用它可以非常容易控制输出 PWM 的个数。这里不用设置。<br>虽然定时器基本初始化结构体有 5 个成员，但对于基本定时器只需设置其中两个就可以，想想使用基本定时器就是简单。</p>
<h2 id="高级定时器"><a href="#高级定时器" class="headerlink" title="高级定时器"></a>高级定时器</h2><p>高级控制定时器 (TIM1 和 TIM8) 和通用定时器在基本定时器的基础上引入了外部引脚，可以实现输入捕获和输出比较功能。高级控制定时器比通用定时器增加了可编程死区互补输出、重复计数器、带刹车 (断路) 功能，这些功能都是针对工业电机控制方面。<br>高级控制定时器时基单元包含一个 16 位自动重装载寄存器 ARR，一个 16 位的计数器 CNT，可向上/下计数，一个 16 位可编程预分频器 PSC，预分频器时钟源有多种可选，有内部的时钟、外部时钟。还有一个 8 位的重复计数器 RCR，这样最高可实现 40 位的可编程定时。</p>
<h3 id="高级定时器功能框图"><a href="#高级定时器功能框图" class="headerlink" title="高级定时器功能框图"></a>高级定时器功能框图</h3><p>高级控制定时器功能框图包含了高级控制定时器最核心内容，掌握了功能框图，对高级控制定时器就有一个整体的把握，在编程时思路就非常清晰，见，图中有些寄存器是带影子的，表示其有影子寄存器。</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696779182439.png" alt="高级定时器功能框图"></p>
<h4 id="时钟源-1"><a href="#时钟源-1" class="headerlink" title="时钟源"></a>时钟源</h4><p>高级控制定时器有四个时钟源可选：</p>
<ul>
<li>内部时钟源 CK_INT</li>
<li>外部时钟模式 1：外部输入引脚 TIx（x=1,2,3,4）</li>
<li>外部时钟模式 2：外部触发输入 ETR</li>
<li>内部触发输入</li>
</ul>
<h5 id="内部时钟源-CK-INT"><a href="#内部时钟源-CK-INT" class="headerlink" title="内部时钟源 (CK_INT)"></a>内部时钟源 (CK_INT)</h5><p>内部时钟 CK_INT 即来自于芯片内部，等于 168M，一般情况下，我们都是使用内部时钟。当从<br>模式控制寄存器 TIMx_SMCR 的 SMS 位等于 000 时，则使用内部时钟。</p>
<h5 id="外部时钟模式-1"><a href="#外部时钟模式-1" class="headerlink" title="外部时钟模式 1"></a>外部时钟模式 1</h5><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696779210415.png" alt="外部时钟模式1"></p>
<ul>
<li>时钟信号输入引脚<br>   当使用外部时钟模式 1 的时候，时钟信号来自于定时器的输入通道，总共有 4 个，分别为 TI1/2/3/4，即 TIMx_CH1/2/3/4。具体使用哪一路信号，由 TIM_CCMRx 的位 CCxS[1:0] 配置，其中 CCMR1控制 TI1/2，CCMR2 控制 TI3/4。</li>
<li>滤波器<br>如果来自外部的时钟信号的频率过高或者混杂有高频干扰信号的话，我们就需要使用滤波器对信号重新采样，来达到降频或者去除高频干扰的目的，具体的由 TIMx_CCMRx 的位 ICxF[3:0] 配置。</li>
<li>边沿检测<br>边沿检测的信号来自于滤波器的输出，在成为触发信号之前，需要进行边沿检测，决定是上升沿有效还是下降沿有效，具体的由 TIMx_CCER 的位 CCxP 和 CCxNP 配置。</li>
<li>触发选择<br>当使用外部时钟模式 1 时，触发源有两个，一个是滤波后的定时器输入 1（TI1FP1）和滤波后的定时器输入 2（TI2FP2），具体的由 TIMxSMCR 的位 TS[2:0] 配置。</li>
<li>从模式选择<br>选定了触发源信号后，最后我们需把信号连接到 TRGI 引脚，让触发信号成为外部时钟模式 1 的输入，最终等于 CK_PSC，然后驱动计数器 CNT 计数。具体的配置 TIMx_SMCR 的位 SMS[2:0]为 111 即可选择外部时钟模式 1。</li>
<li>使能计数器<br>经过上面的 5 个步骤之后，最后我们只需使能计数器开始计数，外部时钟模式 1 的配置就算完成。使能计数器由 TIMx_CR1 的位 CEN 配置。</li>
</ul>
<h5 id="外部时钟模式-2"><a href="#外部时钟模式-2" class="headerlink" title="外部时钟模式 2"></a>外部时钟模式 2</h5><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696779230823.png" alt="外部时钟模式2"></p>
<ul>
<li>时钟信号输入引脚<br>当使用外部时钟模式 2 的时候，时钟信号来自于定时器的特定输入通道 TIMx_ETR，只有 1 个。</li>
<li>外部触发极性<br>来自 ETR 引脚输入的信号可以选择为上升沿或者下降沿有效，具体的由 TIMx_SMCR 的位 ETP配置。</li>
<li>外部触发预分频器<br>由于 ETRP 的信号的频率不能超过 TIMx_CLK（72M）的 1/4，当触发信号的频率很高的情况下，就必须使用分频器来降频，具体的由 TIMx_SMCR 的位 ETPS[1:0] 配置。</li>
<li>滤波器<br>如果 ETRP 的信号的频率过高或者混杂有高频干扰信号的话，我们就需要使用滤波器对 ETRP 信号重新采样，来达到降频或者去除高频干扰的目的。具体的由 TIMx_SMCR 的位 ETF[3:0] 配置，其中的 fDTS 是由内部时钟 CK_INT 分频得到，具体的由 TIMx_CR1 的位 CKD[1:0] 配置。</li>
<li>从模式选择<br>经过滤波器滤波的信号连接到 ETRF 引脚后，触发信号成为外部时钟模式 2 的输入，最终等于CK_PSC，然后驱动计数器 CNT 计数。具体的配置 TIMx_SMCR 的位 ECE 为 1 即可选择外部时钟模式 2。</li>
<li>使能计数器<br>经过上面的 5 个步骤之后，最后我们只需使能计数器开始计数，外部时钟模式 2 的配置就算完成。使能计数器由 TIMx_CR1 的位 CEN 配置。</li>
</ul>
<h5 id="内部触发输入"><a href="#内部触发输入" class="headerlink" title="内部触发输入"></a>内部触发输入</h5><p>内部触发输入是使用一个定时器作为另一个定时器的预分频器。硬件上高级控制定时器和通用定时器在内部连接在一起，可以实现定时器同步或级联。主模式的定时器可以对从模式定时器执行复位、启动、停止或提供时钟。</p>
<h4 id="时基单元"><a href="#时基单元" class="headerlink" title="时基单元"></a>时基单元</h4><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696779244015.png" alt="时基单元"><br>高级控制定时器时基单元功能包括四个寄存器，分别是计数器寄存器 (CNT)、预分频器寄存器(PSC)、自动重载寄存器 (ARR) 和重复计数器寄存器 (RCR)。其中重复计数器 RCR 是高级定时器独有，通用和基本定时器没有。前面三个寄存器都是 16 位有效，TIMx_RCR 寄存器是 8 位有效。</p>
<ul>
<li>预分频器<br>预分频器 PSC，有一个输入时钟 CK_PSC 和一个输出时钟 CK_CNT。输入时钟 CK_PSC 就是上面时钟源的输出，输出 CK_CNT 则用来驱动计数器 CNT 计数。通过设置预分频器 PSC 的值可以得到不同的 CK_CNT，实际计算为：fCK_CNT 等于 f:sub:CK_PSC/(PSC[15:0]+1)，可以实现 1 至65536 分频。</li>
<li>计数器<br>高级控制定时器的计数器有三种计数模式，分别为递增计数模式、递减计数模式和递增/递减 (中心对齐) 计数模式。<br>(1) 递增计数模式下，计数器从 0 开始计数，每来一个 CK_CNT 脉冲计数器就增加 1，直到计数器的值与自动重载寄存器 ARR 值相等，然后计数器又从 0 开始计数并生成计数器上溢事件，计数器总是如此循环计数。如果禁用重复计数器，在计数器生成上溢事件就马上生成更新事件 (UEV)；如果使能重复计数器，每生成一次上溢事件重复计数器内容就减 1，直到重复计数器内容为 0 时才会生成更新事件。<br>(2) 递减计数模式下，计数器从自动重载寄存器 ARR 值开始计数，每来一个 CK_CNT 脉冲计数器就减 1，直到计数器值为 0，然后计数器又从自动重载寄存器 ARR 值开始递减计数并生成计数器下溢事件，计数器总是如此循环计数。如果禁用重复计数器，在计数器生成下溢事件就马上生成更新事件；如果使能重复计数器，每生成一次下溢事件重复计数器内容就减 1，直到重复计数器内容为 0 时才会生成更新事件。<br>(3) 中心对齐模式下，计数器从 0 开始递增计数，直到计数值等于 (ARR-1) 值生成计数器上溢事件，然后从 ARR 值开始递减计数直到 1 生成计数器下溢事件。然后又从 0 开始计数，如此循环。每次发生计数器上溢和下溢事件都会生成更新事件。</li>
<li>自动重载寄存器ARR<br>自动重载寄存器 ARR 用来存放与计数器 CNT 比较的值，如果两个值相等就递减重复计数器。可以通过 TIMx_CR1 寄存器的 ARPE 位控制自动重载影子寄存器功能，如果 ARPE 位置 1，自动重载影子寄存器有效，只有在事件更新时才把 TIMx_ARR 值赋给影子寄存器。如果 ARPE 位为 0，则修改 TIMx_ARR 值马上有效。</li>
<li>重复计数器RCR<br>在基本/通用定时器发生上/下溢事件时直接就生成更新事件，但对于高级控制定时器却不是这样，高级控制定时器在硬件结构上多出了重复计数器，在定时器发生上溢或下溢事件是递减重复计数器的值，只有当重复计数器为 0 时才会生成更新事件。在发生 N+1 个上溢或下溢事件 (N 为RCR 的值) 时产生更新事件。</li>
</ul>
<h4 id="输出比较"><a href="#输出比较" class="headerlink" title="输出比较"></a>输出比较</h4><p>输出比较就是通过定时器的外部引脚对外输出控制信号，有冻结、将通道 X（x=1,2,3,4）设置为匹配时输出有效电平、将通道 X 设置为匹配时输出无效电平、翻转、强制变为无效电平、强制变为有效电平、PWM1 和 PWM2 这八种模式，具体使用哪种模式由寄存器 CCMRx 的位 OCxM[2:0]配置。其中 PWM 模式是输出比较中的特例，使用的也最多。<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696779259997.png" alt="输出比较"></p>
<ul>
<li>比较寄存器<br>当计数器 CNT 的值跟比较寄存器 CCR 的值相等的时候，输出参考信号 OCxREF 的信号的极性就会改变，其中 OCxREF=1（高电平）称之为有效电平，OCxREF=0（低电平）称之为无效电平，并且会产生比较中断 CCxI，相应的标志位 CCxIF（SR 寄存器中）会置位。然后 OCxREF 再经过一系列的控制之后就成为真正的输出信号 OCx/OCxN。</li>
<li>死区发生器<br>在生成的参考波形 OCxREF 的基础上，可以插入死区时间，用于生成两路互补的输出信号 OCx和 OCxN，死区时间的大小具体由 BDTR 寄存器的位 DTG[7:0] 配置。死区时间的大小必须根据与输出信号相连接的器件及其特性来调整。下面我们简单举例说明下带死区的 PWM 信号的应用，我们以一个板桥驱动电路为例。<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696779272789.png" alt="死区发生器"><br>在这个半桥驱动电路中，Q1 导通，Q2 截止，此时我想让 Q1 截止 Q2 导通，肯定是要先让 Q1 截止一段时间之后，再等一段时间才让 Q2 导通，那么这段等待的时间就称为死区时间，因为 Q1关闭需要时间（由 MOS 管的工艺决定）。如果 Q1 关闭之后，马上打开 Q2，那么此时一段时间内相当于 Q1 和 Q2 都导通了，这样电路会短路。<br>图带死区插入的互补输出 是针对上面的半桥驱动电路而画的带死区插入的 PWM 信号，图中的死区时间要根据 MOS 管的工艺来调节。<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696779290305.png" alt="带死区插入的互补输出"></li>
<li>输出控制<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696779303453.png" alt="输出控制"><br>在输出比较的输出控制中，参考信号 OCxREF 在经过死区发生器之后会产生两路带死区的互补信号 OCx_DT 和 OCxN_DT（通道 1<del>3 才有互补信号，通道 4 没有，其余跟通道 1</del>3 一样），这两路带死区的互补信号然后就进入输出控制电路，如果没有加入死区控制，那么进入输出控制电路的信号就直接是 OCxREF。<br>进入输出控制电路的信号会被分成两路，一路是原始信号，一路是被反向的信号，具体的由寄存器 CCER 的位 CCxP 和 CCxNP 控制。经过极性选择的信号是否由 OCx 引脚输出到外部引脚CHx/CHxN 则由寄存器 CCER 的位 CxE/CxNE 配置。<br>如果加入了断路（刹车）功能，则断路和死区寄存器 BDTR 的 MOE、OSSI 和 OSSR 这三个位会共同影响输出的信号。</li>
<li>输出引脚<br>输出比较的输出信号最终是通过定时器的外部 IO 来输出的，分别为 CH1/2/3/4，其中前面三个通道还有互补的输出通道 CH1/2/3N。更加详细的 IO 说明还请查阅相关的数据手册。</li>
</ul>
<h3 id="输出比较应用"><a href="#输出比较应用" class="headerlink" title="输出比较应用"></a>输出比较应用</h3><ul>
<li>PWM输出模式<br>PWM 输出就是对外输出脉宽（即占空比）可调的方波信号，信号频率由自动重装寄存器 ARR 的值决定，占空比由比较寄存器 CCR 的值决定。<br>PWM 模式分为两种，PWM1 和 PWM2，总得来说是差不多，就看你怎么用而已，具体的区别见表格 PWM1 与 PWM2 模式的区别。<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696779321929.png" alt="PWM1和2的区别"><br>下面我们以 PWM1 模式来讲解，以计数器 CNT 计数的方向不同还分为边沿对齐模式和中心对齐模式。PWM 信号主要都是用来控制电机，一般的电机控制用的都是边沿对齐模式，FOC 电机一般用中心对齐模式。我们这里只分析这两种模式在信号感官上（即信号波形）的区别，具体在电机控制中的区别不做讨论，到了你真正需要使用的时候就会知道了。<ul>
<li>PWM边沿对齐模式、<br>在递增计数模式下，计数器从 0 计数到自动重载值（TIMx_ARR 寄存器的内容），然后重新从0开始计数并生成计数器上溢事件<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696779331143.png" alt="边沿对齐"><br>在边沿对齐模式下，计数器 CNT 只工作在一种模式，递增或者递减模式。这里我们以 CNT 工作在递增模式为例，在中，ARR=8，CCR=4，CNT 从 0 开始计数，当 CNT&lt;CCR 的值时，OCxREF为有效的高电平，于此同时，比较中断寄存器 CCxIF 置位。当 CCR=&lt;CNT&lt;=ARR 时，OCxREF为无效的低电平。然后 CNT 又从 0 开始计数并生成计数器上溢事件，以此循环往复。</li>
<li>PWM中心对齐模式<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696779341576.png" alt="中心对齐"><br>在中心对齐模式下，计数器 CNT 是工作做递增/递减模式下。开始的时候，计数器 CNT 从 0 开始计数到自动重载值减 1(ARR-1)，生成计数器上溢事件；然后从自动重载值开始向下计数到 1 并生成计数器下溢事件。之后从 0 开始重新计数。<br>图 PWM1 模式的中心对齐波形 是 PWM1 模式的中心对齐波形，ARR=8，CCR=4。第一阶段计数器 CNT 工作在递增模式下，从 0 开始计数，当 CNT&lt;CCR 的值时，OCxREF 为有效的高电平，当CCR=&lt;CNT«ARR 时，OCxREF 为无效的低电平。第二阶段计数器 CNT 工作在递减模式，从 ARR的值开始递减，当 CNT&gt;CCR 时，OCxREF 为无效的低电平，当 CCR=&gt;CNT&gt;=1 时，OCxREF 为有效的高电平。<br>在波形图上我们把波形分为两个阶段，第一个阶段是计数器 CNT 工作在递增模式的波形，这个阶段我们又分为 ① 和 ② 两个阶段，第二个阶段是计数器 CNT 工作在递减模式的波形，这个阶段我们又分为 ③ 和 ④ 两个阶段。要说中心对齐模式下的波形有什么特征的话，那就是 ① 和 ③ 阶段的时间相等，② 和 ④ 阶段的时间相等。<br>中心对齐模式又分为中心对齐模式 1/2/3 三种，具体由寄存器 CR1 位 CMS[1:0] 配置。具体的区别就是比较中断中断标志位 CCxIF 在何时置 1：中心模式 1 在 CNT 递减计数的时候置 1，中心对齐模式 2 在 CNT 递增计数时置 1，中心模式 3 在 CNT 递增和递减计数时都置 1。</li>
</ul>
</li>
</ul>
<h3 id="定时器初始化结构体"><a href="#定时器初始化结构体" class="headerlink" title="定时器初始化结构体"></a>定时器初始化结构体</h3><h4 id="TIM-TimeBaseInitTypeDef"><a href="#TIM-TimeBaseInitTypeDef" class="headerlink" title="TIM_TimeBaseInitTypeDef"></a>TIM_TimeBaseInitTypeDef</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token class-name">uint16_t</span> TIM_Prescaler<span class="token punctuation">;</span> <span class="token comment">// 预分频器</span>
	<span class="token class-name">uint16_t</span> TIM_CounterMode<span class="token punctuation">;</span> <span class="token comment">// 计数模式</span>
	<span class="token class-name">uint32_t</span> TIM_Period<span class="token punctuation">;</span> <span class="token comment">// 定时器周期</span>
	<span class="token class-name">uint16_t</span> TIM_ClockDivision<span class="token punctuation">;</span> <span class="token comment">// 时钟分频</span>
	<span class="token class-name">uint8_t</span> TIM_RepetitionCounter<span class="token punctuation">;</span> <span class="token comment">// 重复计算器</span>
<span class="token punctuation">}</span> TIM_TimeBaseInitTypeDef<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(1) TIM_Prescaler：定时器预分频器设置，时钟源经该预分频器才是定时器计数时钟 CK_CNT，它设定 PSC 寄存器的值。计算公式为：计数器时钟频率 (fCK_CNT) 等于 fCK_PSC / (PSC[15:0] + 1)，可实现 1 至 65536 分频。<br>(2) TIM_CounterMode：定时器计数方式，可设置为向上计数、向下计数以及中心对齐。高级控制定时器允许选择任意一种。<br>(3) TIM_Period：定时器周期，实际就是设定自动重载寄存器 ARR 的值，ARR 为要装载到实际自动重载寄存器（即影子寄存器）的值，可设置范围为 0 至 65535。<br>(4) TIM_ClockDivision：时钟分频，设置定时器时钟 CK_INT 频率与死区发生器以及数字滤波器采样时钟频率分频比。可以选择 1、2、4 分频。<br>(5) TIM_RepetitionCounter：重复计数器，只有 8 位，只存在于高级定时器。</p>
<h4 id="TIM-OCInitTypeDef"><a href="#TIM-OCInitTypeDef" class="headerlink" title="TIM_OCInitTypeDef"></a>TIM_OCInitTypeDef</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token class-name">uint16_t</span> TIM_OCMode<span class="token punctuation">;</span> <span class="token comment">// 比较输出模式</span>
	<span class="token class-name">uint16_t</span> TIM_OutputState<span class="token punctuation">;</span> <span class="token comment">// 比较输出使能</span>
	<span class="token class-name">uint16_t</span> TIM_OutputNState<span class="token punctuation">;</span> <span class="token comment">// 比较互补输出使能</span>
	<span class="token class-name">uint32_t</span> TIM_Pulse<span class="token punctuation">;</span> <span class="token comment">// 脉冲宽度</span>
	<span class="token class-name">uint16_t</span> TIM_OCPolarity<span class="token punctuation">;</span> <span class="token comment">// 输出极性</span>
	<span class="token class-name">uint16_t</span> TIM_OCNPolarity<span class="token punctuation">;</span> <span class="token comment">// 互补输出极性</span>
	<span class="token class-name">uint16_t</span> TIM_OCIdleState<span class="token punctuation">;</span> <span class="token comment">// 空闲状态下比较输出状态</span>
	<span class="token class-name">uint16_t</span> TIM_OCNIdleState<span class="token punctuation">;</span> <span class="token comment">// 空闲状态下比较互补输出状态</span>
<span class="token punctuation">}</span> TIM_OCInitTypeDef<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>(1) TIM_OCMode：比较输出模式选择，总共有八种，常用的为 PWM1/PWM2。它设定 CCMRx 寄存器 OCxM[2:0] 位的值。<br>(2) TIM_OutputState：比较输出使能，决定最终的输出比较信号 OCx 是否通过外部引脚输出。它设定 TIMx_CCER 寄存器 CCxE/CCxNE 位的值。<br>(3) TIM_OutputNState: 比较互补输出使能，决定 OCx 的互补信号 OCxN 是否通过外部引脚输出。它设定 CCER 寄存器 CCxNE 位的值。<br>(4) TIM_Pulse：比较输出脉冲宽度，实际设定比较寄存器 CCR 的值，决定脉冲宽度。可设置范围为 0 至 65535。<br>(5) TIM_OCPolarity：比较输出极性，可选 OCx 为高电平有效或低电平有效。它决定着定时器通道有效电平。它设定 CCER 寄存器的 CCxP 位的值。<br>(6) TIM_OCNPolarity：比较互补输出极性，可选 OCxN 为高电平有效或低电平有效。它设定TIMx_CCER 寄存器的 CCxNP 位的值。<br>(7) TIM_OCIdleState：空闲状态时通道输出电平设置，可选输出 1 或输出 0，即在空闲状态(BDTR_MOE 位为 0) 时，经过死区时间后定时器通道输出高电平或低电平。它设定 CR2 寄存器的 OISx 位的值。<br>(8) TIM_OCNIdleState：空闲状态时互补通道输出电平设置，可选输出 1 或输出 0，即在空闲状态(BDTR_MOE 位为 0) 时，经过死区时间后定时器互补通道输出高电平或低电平，设定值必须与TIM_OCIdleState 相反。它设定是 CR2 寄存器的 OISxN 位的值。</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696779461894.png" alt="over"></p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>Tim定时器</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown学习</title>
    <url>/2024/04/10/markdown-xue-xi/</url>
    <content><![CDATA[<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696776023223.png" alt="引入.png"></p>
<h1 id="一级大标"><a href="#一级大标" class="headerlink" title="一级大标"></a>一级大标</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>哇酷哇酷好用，但是吧要注意#后面要有一个空格哦<br><em>斜体</em><br><strong>粗体</strong><br><em><strong>粗斜体</strong></em><br>我想让这句话在下一行显示<br>i will be 前程似锦</p>
<p><a href="http://kkut1.github.io/">这是我的blog</a></p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/Background/sky_pink.jpg" alt="插入一个图片"></p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/Background/sky_pink.jpg#pic_center=50x50" alt="插入一个图片"></p>
<p>无序列表</p>
<ul>
<li>这是无序列表<ul>
<li>二级无序</li>
</ul>
</li>
</ul>
<ul>
<li>这也是无序列表</li>
</ul>
<ul>
<li>这还是无序列表</li>
</ul>
<p> 有序列表</p>
<ol>
<li>有序<br> 1.1 二级有序</li>
<li>有序</li>
<li>有序<br>下面是条分割线，要注意空一行再输入*** 或者—</li>
</ol>
<hr>
<p><del>还是把我删了吧</del></p>
<p><u>划重点划重点</u></p>
<p>yingyongyixia <code>wo</code></p>
<p><code>print('hello KKT')</code></p>
<table>
<thead>
<tr>
<th align="left">我是表头1</th>
<th align="right">我是表头2</th>
<th align="center">我是表头3</th>
</tr>
</thead>
<tbody><tr>
<td align="left">不错</td>
<td align="right">很好</td>
<td align="center">这么棒</td>
</tr>
<tr>
<td align="left">向左</td>
<td align="right">向右</td>
<td align="center">向前看</td>
</tr>
<tr>
<td align="left">[^1]:脚注1</td>
<td align="right"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left">[^2]:脚注2</td>
<td align="right"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>我就是我是不一样的烟火，加反斜线表示符号本身<br>\<br>/<br>*</p>
<p>哇酷哇酷<br>还可以添加<strong>待办事项</strong><br>such as</p>
<ul>
<li><input disabled="" type="checkbox"> 今天要吃肉肉</li>
<li><input disabled="" type="checkbox"> 散步</li>
<li><input checked="" disabled="" type="checkbox"> 喝多多的水</li>
<li><input checked="" disabled="" type="checkbox"> 找刘老师学写代码</li>
</ul>
<p><em><strong>你的$我的$好像不一样</strong></em><br>$$E=mc^2$$</p>
<hr>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696776119362.png" alt="完结撒花"></p>
]]></content>
      <categories>
        <category>语言学习</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32串口学习</title>
    <url>/2023/10/01/chuan-kou-xue-xi/</url>
    <content><![CDATA[<h2 id="串口学习"><a href="#串口学习" class="headerlink" title="串口学习"></a>串口学习</h2><h4 id="用到新器件："><a href="#用到新器件：" class="headerlink" title="用到新器件："></a>用到新器件：</h4><p>USB转TTL</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696923473260.png" alt="image"></p>
<table>
<thead>
<tr>
<th align="left">USB 转 TTL 模块 GND</th>
<th align="left">单片机 GND 口</th>
</tr>
</thead>
<tbody><tr>
<td align="left">USB 转 TTL 模块 TXD</td>
<td align="left">PA10</td>
</tr>
<tr>
<td align="left">USB 转 TTL 模块 RXD</td>
<td align="left">PA9</td>
</tr>
<tr>
<td align="left">USB 转 TTL 模块 USB 口</td>
<td align="left">电脑 USB</td>
</tr>
</tbody></table>
<ol>
<li>并行通信和串行通信 所谓通信，其实说白了就是处理器与外部设备之间的交流，就像电脑连接键盘、鼠标或打印机之类。计算机领域的通信一般有两种方式，即并行通信和串行通信。这两种方式的优缺点对比如下：</li>
</ol>
<p>并行通信<br>&nbsp;&nbsp; -传输原理：数据各个位同时传输。</p>
<p>&nbsp;&nbsp; -优点：速度快</p>
<p>&nbsp;&nbsp; -缺点：占用引脚资源多</p>
<p>串行通信<br>&nbsp;&nbsp; -传输原理：数据按位顺序传输。</p>
<p>&nbsp;&nbsp; -优点：占用引脚资源少</p>
<p>&nbsp;&nbsp; -缺点：速度相对较慢</p>
<ol>
<li><p>串行通信的分类</p>
<p>按照数据的传送方向可以分为：</p>
</li>
</ol>
<p>单工：数据传输只支持数据在一个方向上传输<br>半双工：允许数据在两个方向上传输，但是，在某一时刻，只允许数据在一个方向上传输，它实际上是一种切换方向的单工通信；<br>全双工：允许数据同时在两个方向上传输，因此，全双工通信是两个单工通信方式的结合，它要求发送设备和接收设备都有独立的接收和发送能力。</p>
<p>关于 UART 和 USART：</p>
<p>UART 串口通信协议全称叫做通用异步收发传输器 （Universal Asynchronous Receiver/Transmitter）、</p>
<p>USART 串口通信协议全称叫做通用同步异步收发传输器（universal synchronous asynchronous receiver and transmitter）</p>
<p>一般的单片机 UART 和 USART 使用方式是一样的，都使用异步模式，所以我们 初期学习 stm32 串口的使用，学的就是 uart 类型的异步串口通信。</p>
<p>TTL：TTL 电平信号规定，+5V 等价于逻辑“1”，0V 等价于逻辑“0”(采用二进制来表示数据时)。这样的数据通信及电平规定方式，被称做 TTL（晶体管-晶体管逻辑电 平）信号系统。TTL 设备使用的电压水平普遍为 5V 或 3.3V，目前咱们学习单片机TTL电压是3.3V，故把跳线帽中 VCC和3.3连一起。</p>
<p>.在使用前要安装上CH340驱动。</p>
<p>TXD 发送数据 Transmit(tx) Data 简写形式 RXD 接受数据 Receive(rx) Data 简写形式 TXD 和 TX，RXD 和 RX 其实是一个意思。所以要这样交叉连，TTL 模块的 TXD就相当于电脑的发送接口，那当然就要连 STM32 的接收接口，也就是 RX，一 端发送，另一端接收。 另一条线路同理。</p>
<p>现在咱们了解一下波特率：</p>
<p>波特率(Baud Rate)单位 bps – 每秒传送的二进制位数 bit Per Second.。9600bps 就是每秒传输 9600 位。 因为一个字节是 8 个 bit，而一个字节通常可以表达一个 ASCII 码，比如一个英 文字母，所以：9600 的波特率的信道（信号的传递通道），理论上每秒可以传 输 9600/8 个英文字母的数据量，也就是 1200 个字节，大约 1.2KB。 （1 字节=1B=8 位=8bit）。</p>
<p>p.s. 如果 1.2KB/s 的网速，可以想象通信有多慢，所以 uart 通信并不是高速通信。</p>
<p>相关寄存器：</p>
<p>USART_SR状态寄存器<br>USART_DR数据寄存器<br>USART_BRR波特率寄存器</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696923486356.png" alt="image"></p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696923493806.png" alt="image"></p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696923517843.png" alt="image"></p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696923526205.png" alt="image"></p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696923532868.png" alt="image"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">uart_init</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">//GPIO端口设置   PA9--TXD  PA10--RXD</span>
GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>
USART_InitTypeDef USART_InitStructure<span class="token punctuation">;</span>
NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>
<span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_USART<span class="token operator">|</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//使USART1，GPIOA时钟</span>

<span class="token comment">//USART1_TX   GPIOA.9---输出</span>
GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_9<span class="token punctuation">;</span> <span class="token comment">//PA.9</span>
GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>
GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>	<span class="token comment">//复用推挽输出</span>
<span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化GPIOA.9</span>

<span class="token comment">//USART1_RX	  GPIOA.10初始化---输入</span>
GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_10<span class="token punctuation">;</span><span class="token comment">//PA10</span>
GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span><span class="token comment">//浮空输入</span>
<span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化GPIOA.10  </span>

<span class="token comment">//Usart1 NVIC 配置     串口接收信息时会频繁进入串口接受中断，为了不影响其他程序正常运行，一般把中断两位优先级调最低。</span>
NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> USART1_IRQn<span class="token punctuation">;</span>
NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">;</span><span class="token comment">//抢占优先级3</span>
NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>		<span class="token comment">//子优先级3</span>
NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>			<span class="token comment">//IRQ通道使能</span>
<span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//根据指定的参数初始化VIC寄存器</span>
<span class="token comment">//USART 初始化设置</span>
    USART_InitStructure<span class="token punctuation">.</span>USART_BaudRate <span class="token operator">=</span> bound<span class="token punctuation">;</span><span class="token comment">//串口波特率</span>
    USART_InitStructure<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span><span class="token comment">//字长为8位数据格式   还有九位，一般用八位。</span>
    USART_InitStructure<span class="token punctuation">.</span>USART_StopBits <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span><span class="token comment">//一个停止位</span>
    USART_InitStructure<span class="token punctuation">.</span>USART_Parity <span class="token operator">=</span> USART_Parity_No<span class="token punctuation">;</span><span class="token comment">//无奇偶校验位</span>
    USART_InitStructure<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span><span class="token comment">//无硬件数据流控制   --一般没用过</span>
    USART_InitStructure<span class="token punctuation">.</span>USART_Mode <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>	<span class="token comment">//收发模式</span>

<span class="token function">USART_Init</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化串口1</span>
<span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启串口接受中断</span>
<span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//使能串口1</span>
<span class="token punctuation">}</span>

<span class="token comment">//重定义fputc函数 ---重定向printf，直接复制即可</span>
<span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span>f<span class="token punctuation">)</span>
<span class="token punctuation">{</span>      
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>USART1<span class="token operator">-&gt;</span>SR<span class="token operator">&amp;</span><span class="token number">0X40</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//循环发送,直到发送完毕   </span>
    USART1<span class="token operator">-&gt;</span>DR <span class="token operator">=</span> <span class="token punctuation">(</span>u8<span class="token punctuation">)</span> ch<span class="token punctuation">;</span>      
	<span class="token keyword">return</span> ch<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*如果使用多个串口只需修改USART1即可,
ps .USART1-&gt;USART3    */</span>
<span class="token comment">//故如果要打印自己姓名只需在main中printf即可</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>









]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>串口</tag>
      </tags>
  </entry>
  <entry>
    <title>安装激活keil5</title>
    <url>/2023/10/01/an-zhuang-ji-huo-keil5/</url>
    <content><![CDATA[<h1 id="安装激活keil5"><a href="#安装激活keil5" class="headerlink" title="安装激活keil5"></a>安装激活keil5</h1><h1 id="1-Keil-MDK-ARM下载"><a href="#1-Keil-MDK-ARM下载" class="headerlink" title="1. Keil MDK-ARM下载"></a>1. Keil MDK-ARM下载</h1><p>目前（2023年10月）Keil MDK-ARM官方最新版本是V5.38</p>
<p>MDK-ARM安装包下载</p>
<p>官网下载地址：<a href="https://www.keil.com/download/product/">https://www.keil.com/download/product/</a></p>
<p>百度网盘下载地址：<a href="https://download.csdn.net/download/dengjin20104042056/12718973">https://download.csdn.net/download/dengjin20104042056/12718973</a></p>
<h1 id="2-官网下载"><a href="#2-官网下载" class="headerlink" title="2. 官网下载"></a>2. 官网下载</h1><p>进入网址<a href="https://www.keil.com/download/product/">https://www.keil.com/download/product/</a><br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826485273.png" alt="Alt text"><br>点击MDK-Arm<br>然后会进入新的界面，并让你填一些信息，这些信息随便填写就行。点击Submit<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826496639.png" alt="Alt text"><br>进入到以一下界面!<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826508191.png" alt="Alt text"><br>点击MDK538A.EXE下载最新版</p>
<h1 id="3-安装Keil5"><a href="#3-安装Keil5" class="headerlink" title="3. 安装Keil5"></a>3. 安装Keil5</h1><p>3.1 双击安装包，进入安装向导界面，点击Next<br>![Alt text]<img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826517257.png" alt="enter description here"><br>3.2 选择同意协议，然后下一步<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826523209.png" alt="Alt text"><br>3.3 选择软件和支持包安装路径（可以默认），点击Next。<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826574975.png" alt="Alt text"><br>3.4 填写基本信息，然后选择下一步。<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826580262.png" alt="Alt text"><br>3.5 安装过程中，弹出如下窗口，选择安装<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826585149.png" alt="Alt text"><br>3.6 点击Finish，完成安装。<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826590369.png" alt="Alt text"><br>安装完成之后弹出的这个界面直接关掉就行<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826596024.png" alt="Alt text"></p>
<h1 id="4-激活Keil5"><a href="#4-激活Keil5" class="headerlink" title="4. 激活Keil5"></a>4. 激活Keil5</h1><p>Keil MDK-ARM是一个收费的软件，官方打击盗版也比较严厉，若你是商业用途，建议购买正版软件。当然，针对个人开发学习的朋友而言，进行非商业用途的使用。</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826601898.png" alt="Alt text"><br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826608294.png" alt="Alt text"><br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826614185.png" alt="Alt text"><br>复制CID<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826619388.png" alt="Alt text"><br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826625181.png" alt="Alt text"><br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826633079.png" alt="Alt text"><br>粘贴序列号在1处，然后点击按钮2<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826640973.png" alt="Alt text"></p>
<h1 id="5-安装芯片包"><a href="#5-安装芯片包" class="headerlink" title="5. 安装芯片包"></a>5. 安装芯片包</h1><h2 id="1-进入官网"><a href="#1-进入官网" class="headerlink" title="1.进入官网"></a>1.进入官网</h2><p>ARM Keil官网链接：(<a href="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826651150.png">https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700826651150.png</a>)</p>
<h2 id="2-进入CMSIS-Packs中选择需要的pack包"><a href="#2-进入CMSIS-Packs中选择需要的pack包" class="headerlink" title="2.进入CMSIS Packs中选择需要的pack包"></a>2.进入CMSIS Packs中选择需要的pack包</h2><p>输入需要的芯片型号后回车能显示出所有相关型号，或者在输入栏下方列表中查找：<br>找到所需安装包后，点击下载<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700827134830.png" alt="Alt text"><br>下载速度慢的话可以在迅雷里面下载，迅雷有镜像源下载速度会很快</p>
<h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h2><p>双击打开，点Next就可以开始安装<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700827139319.png" alt="Alt text"></p>
<h1 id="6-安装V5编译器"><a href="#6-安装V5编译器" class="headerlink" title="6. 安装V5编译器"></a>6. 安装V5编译器</h1><h2 id="1-安装V5编译器的原因"><a href="#1-安装V5编译器的原因" class="headerlink" title="1.安装V5编译器的原因"></a>1.安装V5编译器的原因</h2><p>直接使用最新版的keil5编译时，发现网上的很多代码编译不过去。原因是以前的代码是ARM Compiler V5做的。然而，现在的KEIL不给预装ARM Compiler V5，如果用v6编译就如下图所示。所以我想办法给KEIL支持ARM Compiler V5。<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700827148073.png" alt="Alt text"><br>检查了一下，发现确实没有v5的编译器。<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700827157284.png" alt="Alt text"></p>
<h2 id="2-获得ARM-Compiler-V5的安装包"><a href="#2-获得ARM-Compiler-V5的安装包" class="headerlink" title="2. 获得ARM Compiler V5的安装包"></a>2. 获得ARM Compiler V5的安装包</h2><p>国内有很多前辈其实已经把ARM Compiler V5下载下来了，仔细点搜还是搜得到的。但是我这里找到了一个官方的办法。</p>
<p>找到了官方的这个问题说明文档：<a href="https://developer.arm.com/documentation/ka005198/latest">https://developer.arm.com/documentation/ka005198/latest</a></p>
<p>然后顺着去找到下载网址：<a href="https://developer.arm.com/downloads/view/ACOMP5%E3%80%82">https://developer.arm.com/downloads/view/ACOMP5。</a><br>注意的是，这个网站是要登录ARM的账号。如果没有的话去注册一个就好。<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700827166455.png" alt="Alt text"><br>这里有两个下载资源。第一个应该是给linux的。如果是keil的话，我们一般是用在Windows上的，所以我们下载第二个。</p>
<h2 id="3-安装-1"><a href="#3-安装-1" class="headerlink" title="3. 安装"></a>3. 安装</h2><p>下载以后，安装。但是注意安装路径一定要放在KEIL\ARM\下面创建的子目录里。我这里用的是KEIL\ARM\ARMCC5。</p>
<h2 id="4-KEIL下引入ARM-Compiler-V5"><a href="#4-KEIL下引入ARM-Compiler-V5" class="headerlink" title="4. KEIL下引入ARM Compiler V5"></a>4. KEIL下引入ARM Compiler V5</h2><p>安装好了以后，点击那个－＞Folder/Extensions.<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700827173569.png" alt="Alt text"><br>点Use ARM Compiler 最右边那个…。<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700827178876.png" alt="Alt text"><br>选中安装编译器的文件夹。于是就会出现：<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700827186382.png" alt="Alt text"><br>再点Setup Default ARM Compiler Version<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700827194667.png" alt="Alt text"><br>一路点完确定。</p>
<h2 id="5-确认"><a href="#5-确认" class="headerlink" title="5. 确认"></a>5. 确认</h2><p>点魔法棒，确认一下。已经可以选中ARM Compiler v5了。<br><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1700827201560.png" alt="Alt text"></p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>KEIL5</tag>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式学习简介</title>
    <url>/2023/07/23/qian-ru-shi-xue-xi-jian-jie/</url>
    <content><![CDATA[<h1 id="嵌入式学习方向介绍"><a href="#嵌入式学习方向介绍" class="headerlink" title="嵌入式学习方向介绍"></a>嵌入式学习方向介绍</h1><h2 id="视频简介"><a href="#视频简介" class="headerlink" title="视频简介"></a>视频简介</h2><iframe src="//player.bilibili.com/player.html?aid=378089584&amp;bvid=BV1Hf4y1w7BH&amp;cid=410341156&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="400px" height="300px"> </iframe>

<h2 id="嵌入式系统简介"><a href="#嵌入式系统简介" class="headerlink" title="嵌入式系统简介"></a>嵌入式系统简介</h2><p><strong>在我的两年学习经历中，嵌入式对我而言即是兴趣也是未来发展的方向。</strong></p>
<p><strong>在我看来，嵌入式就是设计合适的能够完成目标任务需求的电子装置。在其中，我们会使用电气知识设计适用的电路板，在其中添加计算机控制单元——MCU，我们使用C语言（主要）或者其他编程语言对单片机进行编程，实现控制需求。</strong></p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/%E5%B5%8C%E5%85%A5%E5%BC%8F%E4%BB%8B%E7%BB%8D/ART-Pi.jpg" alt="1.单片机图"></p>
<p>比较正式的说法：<em><strong>嵌入式即嵌入式系统，IEEE（美国电气和电子工程师协会）对其定义是用于控制、监视或者辅助操作机器和设备的装置，是一种专用的计算机系统；国内普遍认同的嵌入式系统定义是以应用为中心，以计算机技术为基础，软硬件可裁剪，适应应用系统对功能、可靠性、成本、体积、功耗等严格要求的专用计算机系统；从应用对象上加以定义来说，嵌入式系统是软件和硬件的综合体，还可以涵盖机械等附属装置。</strong></em></p>
<p>嵌入式同时设计软件和硬件，在实际开发中，会专精一个方向，另一个辅修——嵌入式硬件工程师和嵌入式软件工程师，像我的话，主要是偏向软件方向，但我也会了解使用电路知识，PCB设计工具；认识的一个在公司里的硬件工程师大佬，就主攻硬件电路，软件方面主要使用STM32实现控制，会部署一些中间件在其中方便实现控制功能；</p>
<h2 id="科创中心嵌入式小组"><a href="#科创中心嵌入式小组" class="headerlink" title="科创中心嵌入式小组"></a>科创中心嵌入式小组</h2><p><strong>在大学生科创中心，开设有嵌入式学习小组，每年会招收新成员进入培训，指导学习STM32、PCB设计、运动控制、FreeRtos、物联网等技术知识，会有学长带领学员设计机器人、无人机、智能小车等嵌入式系统集成设备，在实践中学习，在学习中探索未来，提高工科生的自我认知。</strong></p>
<p>在实践学习中，科创中心的嵌入式小组主要发展为多个方向：</p>
<p><strong>无人机组</strong> ：</p>
<p><strong>工程小车组</strong>：</p>
<p><strong>物联网开发组</strong>：</p>
<p><strong>Ros机器人组</strong> ：</p>
<p><strong>有趣的作品分享</strong>:</p>
<iframe src="//player.bilibili.com/player.html?aid=226936627&amp;bvid=BV1Uh41137Th&amp;cid=1078338627&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="400px" height="300px"> </iframe>


<iframe src="//player.bilibili.com/player.html?aid=420981979&amp;bvid=BV12341117rG&amp;cid=421416333&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="400px" height="300px"> </iframe>   


<iframe src="//player.bilibili.com/player.html?aid=677612560&amp;bvid=BV1zm4y197Py&amp;cid=467867782&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="400px" height="300px"> </iframe>


]]></content>
  </entry>
  <entry>
    <title>审计人员的职业发展路径</title>
    <url>/2024/04/10/shen-ji-zhi-ye-fa-zhan-lu-jing/</url>
    <content><![CDATA[<h1 id="审计类型"><a href="#审计类型" class="headerlink" title="审计类型"></a>审计类型</h1><ol>
<li>内部审计<br> 内部审计是公司内部成立的，职责是对企业内部<strong>经营活动的合法性</strong>、<strong>内部控制的有效性</strong>以及<strong>财务报表的公允性</strong>进行审查，保证企业的经营活动符合法律规范；确保企业设定的内部控制是有效的，能够应对企业的相关问题；以及保证管理层编制的财务报表是按照适用的财务报告编制基础编制出来的。</li>
<li>外部审计<br> 外部审计是独立于被审计单位以及财务报告使用者的机构，一般是会计师事务所，有<strong>四大</strong>（德勤、毕马威、安永、普华永道）和<strong>本土八大</strong>（可以自己百度）以及其他小型事务所，属于乙方，主要职责是为被审计单位出具审计报告，对财务报表不存在由于舞弊或错误引起的重大错报提供合理保证。</li>
<li>政府审计<br> 政府审计是对<strong>国企、事业单位、财政部</strong>的收支情况进行审计，保证财政收支使用透明。</li>
</ol>
<h1 id="职业发展路线"><a href="#职业发展路线" class="headerlink" title="职业发展路线"></a>职业发展路线</h1><h2 id="审计方向"><a href="#审计方向" class="headerlink" title="审计方向"></a>审计方向</h2><ol>
<li>审计助理-审计-高级审计-审计经理-高级审计经理-合伙人<br> 在事务所每年都会有晋升，只是不同的所不一样，等到了高级审计，想要做项目经理就必须要考CPA证书了，一般情况下只有有CPA才能带队，但也不排除经验丰富或者拥有资源的人没证也可以晋升。但是不管怎样，想要在事务所长期发展CPA是不可缺少的，因为持证人才有审计报告签字权</li>
<li>审计-高级审计-高级审计员（内审）-审计经理（内审）-审计总监<br> 这条路线是由外部审计转到内部审计的，也是从乙方转到甲方，内部审计相对于外部审计来说要轻松很多，工资当然也没有外部审计赚得多，更多的是专注于本公司的业务。</li>
</ol>
<h2 id="会计方向"><a href="#会计方向" class="headerlink" title="会计方向"></a>会计方向</h2><h2 id="金融方向"><a href="#金融方向" class="headerlink" title="金融方向"></a>金融方向</h2><h2 id="税务方向"><a href="#税务方向" class="headerlink" title="税务方向"></a>税务方向</h2><h2 id="考公务员或者事业单位"><a href="#考公务员或者事业单位" class="headerlink" title="考公务员或者事业单位"></a>考公务员或者事业单位</h2><pre><code>在35岁以前考进体制内，比如审计局、财政厅等等都可以，小声提醒审计局也是需要出差的哦。
</code></pre>
<hr>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696776119362.png" alt="完结撒花"></p>
]]></content>
      <categories>
        <category>审计</category>
      </categories>
      <tags>
        <tag>职业发展路径</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32编码器速度采集</title>
    <url>/2023/10/01/dian-ji-bian-ma-qi-ce-su/</url>
    <content><![CDATA[<h1 id="电机编码器测速"><a href="#电机编码器测速" class="headerlink" title="电机编码器测速"></a>电机编码器测速</h1><h2 id="实验效果"><a href="#实验效果" class="headerlink" title="实验效果"></a>实验效果</h2><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696923381345.png" alt="效果图"></p>
<h3 id="1-目的"><a href="#1-目的" class="headerlink" title="1.目的"></a>1.目的</h3><p>电机转动时，测出电机的实时转速，进而对电机进行控制。</p>
<h3 id="2-简介"><a href="#2-简介" class="headerlink" title="2.简介"></a>2.简介</h3><p>以光电式增量编码器为例：</p>
<h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>•Encoder Interface 编码器接口</p>
<p>•编码器接口可接收增量（正交）编码器的信号，根据编码器旋转产生的正交信号脉冲，自动控制CNT自增或自减，从而指示编码器的位置、旋转方向和旋转速度</p>
<p>•每个高级定时器和通用定时器都拥有1个编码器接口</p>
<p>•两个输入引脚借用了输入捕获的通道1和通道2</p>
<p>图片中有一个圆盘，右边是个小红外灯（发光元件），一直照向左边的光敏元件。这个圆盘上有一圈齿，光线正好可以透过小齿的空隙照到光敏元件，随着圆盘 的转动，小齿转走了，又马上挡住光，紧接着下一个小齿…     按照上面的说法，圆盘一直转，光敏元件就能得到一个如下图 A 相那样的波， 通过统计波形所有高电平的数量我们就能算出来这个盘一共转了多少刻度。并 且 也 能 推 算 出 盘 转 到 了 什 么 位 置 。 并且，通过实时计算波的频率，我们就可以测速了。 但是这样有个问题，不知道盘转的方向，正转反转都是这样一个波。 解决方法就是在小齿的内圈再刻上一圈与外圈错开 90°的小齿！就可以得到下 图 B 相的波形，这样就可分辨方向了。</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696923393976.png" alt="image"></p>
<p>A 和 B 两组脉冲相位差 90º，可以判断出旋转方向和旋转速度。</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696923403055.png" alt="image"></p>
<p>通过观察上面 AB 相的波我们发现，圆盘向某个方向一直旋转，AB 两相就是这四个状态周而复始。</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696923410954.png" alt="image"></p>
<p>其次我们看一下编码器的线数：</p>
<p>我们使用的电机后面带的霍尔编码器就是 13ppr，也就是 13 线。也就是电机每转一圈 A 或 B 相的脉冲数。 也就是电机转一圈 A 相和 B 相就分别有 13 个脉冲。</p>
<ul>
<li>GMR编码器  500ppr</li>
<li>霍尔编码器   13ppr</li>
</ul>
<p>如果我们购买的电机为减速电机的话，那么他会有一个减速比；</p>
<p>一圈脉冲总数=13*减速比（减速比：电机输出转速/电机输入转速）</p>
<p>例：减速比为1：50，则一圈脉冲总数=13*50=650。</p>
<p>通过上述分析，用 STM32 的正交解码库函数就能搞定编码器。</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696923418590.png" alt="image"></p>
<p>TIM_EncoderMode_TI1 代表仅 TI1 计数；</p>
<p> TIM_EncoderMode_TI2 代表仅 TI2 计数； </p>
<p>TIM_EncoderMode_TI12 代表 TI1 TI2 都计数。</p>
<p> TI1 就是输入通道 1，就是编码器 A 相，TI2 同理。</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696923425986.png" alt="image"></p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696923432204.png" alt="image"></p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696923439695.png" alt="image"></p>
<h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h3><p>流程图：</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/markdown_img/1696923448216.png" alt="image"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Encoder_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//开启时钟</span>
	<span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM3<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//TIM3  CH1、CH2</span>
	GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>
	GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IPU<span class="token punctuation">;</span>
	GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_6 <span class="token operator">|</span> GPIO_Pin_7<span class="token punctuation">;</span>
	GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>
	<span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//定时器配置</span>
	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure<span class="token punctuation">;</span>
	TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span>
	TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>
	TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> <span class="token number">65536</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>		<span class="token comment">//ARR</span>
	TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>		<span class="token comment">//PSC</span>
	TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_RepetitionCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//输入捕获</span>
	TIM_ICInitTypeDef TIM_ICInitStructure<span class="token punctuation">;</span>
	<span class="token function">TIM_ICStructInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>TIM_ICInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//给结构体附上初值</span>
	TIM_ICInitStructure<span class="token punctuation">.</span>TIM_Channel <span class="token operator">=</span> TIM_Channel_1<span class="token punctuation">;</span>   <span class="token comment">//通道一</span>
	TIM_ICInitStructure<span class="token punctuation">.</span>TIM_ICFilter <span class="token operator">=</span> <span class="token number">0xF</span><span class="token punctuation">;</span>    <span class="token comment">//滤波抗噪音（0-0xf值越大效果越好）</span>
	<span class="token function">TIM_ICInit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_ICInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//写入结构体</span>
	TIM_ICInitStructure<span class="token punctuation">.</span>TIM_Channel <span class="token operator">=</span> TIM_Channel_2<span class="token punctuation">;</span>
	TIM_ICInitStructure<span class="token punctuation">.</span>TIM_ICFilter <span class="token operator">=</span> <span class="token number">0xF</span><span class="token punctuation">;</span>
	<span class="token function">TIM_ICInit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_ICInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">TIM_EncoderInterfaceConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span>TIM_EncoderMode_TI12<span class="token punctuation">,</span> TIM_ICPolarity_Rising<span class="token punctuation">,</span> TIM_ICPolarity_Rising<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//TI12极性配置</span>
	
	<span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//得到CNT当前值</span>
<span class="token class-name">int16_t</span> <span class="token function">Encoder_Get</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name">int16_t</span> Temp<span class="token punctuation">;</span>
	Temp <span class="token operator">=</span> <span class="token function">TIM_GetCounter</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">TIM_SetCounter</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> Temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//main</span>

<span class="token class-name">int16_t</span> Speed<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Timer_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Encoder_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">OLED_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Speed:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">OLED_ShowSignedNum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> Speed<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//TIM定时器可以有效给speed赋值，有两种选择：1.进中断次数多不溢出，且速度延迟低（当前）   2.溢出</span>
<span class="token keyword">void</span> <span class="token function">TIM2_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">==</span> SET<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		Speed <span class="token operator">=</span> <span class="token function">Encoder_Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样就可以对电机进行速度测量了。</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>直流电机</tag>
        <tag>编码器</tag>
      </tags>
  </entry>
</search>
